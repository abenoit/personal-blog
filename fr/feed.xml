<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Am√©lie&#39;s thoughts</title>
  <subtitle></subtitle>
  <link href="{{locale}}/feed.xml" rel="self"/>
  <link href="/"/>
  
    <updated>2022-08-27T00:00:00Z</updated>
  
  <id></id>
  <author>
    <name>Am√©lie Benoit</name>
    <email>amelie.benoit33@gmail.com</email>
  </author>
  
    
    <entry>
      <title>Retour sur Devoxx 2022</title>
      <link href="/fr/blog/retour-sur-devoxx/"/>
      <updated>2022-07-25T00:00:00Z</updated>
      <id>/fr/blog/retour-sur-devoxx/</id>
      <content type="html">
        <![CDATA[
      <p>Devoxx France a repris de plus belle en 2022 ! Retour sur mon exp√©rience en tant que speaker, partage des conf√©rences que j'ai aim√©es et de mes Sketchnotes. 3 jours r√©sum√©s en quelques mots et dessins: Hold my beer!</p>
<p><img src="/images/devoxx/hold-my-beer.jpeg" alt="Hold my beer"></p>
<h1>Devoxx France, en quelques mots</h1>
<p>Devoxx, c'est la plus grande conf√©rence pour les d√©veloppeurs en France. Elle a lieu chaque ann√©e, √† Paris et sur 3 jours, et regroupe pas moins de 3200 personnes. Plus de 170 conf√©rences (formats divers: keynotes, univertities, quickies, hands-on-labs et conf√©rences) sur des th√®mes vari√©s (web, UX, Java, big data, cloud...).</p>
<p>En plus d'√™tre l'ann√©e qui marquait son grand retour apr√®s une p√©riode de pand√©mie marquante, la conf√©rence des d√©veloppeurs passionn√©s f√™tait cette ann√©e ces 10 ans !</p>
<h1>Mon exp√©rience speaker</h1>
<p>√áa aurait √©t√© dommage de faire un article sans parler de mon exp√©rience en tant que Speaker hein üòÑ</p>
<p>J'ai eu l'honneur d'√™tre selectionn√©e pour pr√©senter deux sujets; un premier sur la gestion des √©tats dans React, et un second sur les templates d'email avec MJML.</p>
<p>D'autres articles seront bient√¥t disponibles pour partager sur le processus de soumission au CFP et de mon exp√©rience de speaker.</p>
<h2>React dans tous ses √©tats</h2>
<p><img src="/images/devoxx/me_conf4.jpg" alt="Photo d'Am√©lie sur sc√®ne"></p>
<p>Speakerine: <a href="https://twitter.com/AmelieBenoit33"><strong>Am√©lie Benoit</strong></a></p>
<p>Sources sur Github (slides + code): <a href="https://github.com/abenoit/react-states">https://github.com/abenoit/react-states</a></p>
<p><a href="https://youtu.be/4iyYhLVxruI">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Que nos applications soient legacy ou compl√®tement nouvelles, la question du stockage et de la gestion des donn√©es est une constante. Il existe aujourd'hui de nombreuses fa√ßon de g√©rer ce state, mais peu de guidelines fortes.</p>
<p>Avec des exemples de code, nous verrons ensemble trois acteurs majeurs de la gestion du state en React aujourd'hui: de la solution native √† Recoil en passant par Redux-toolkit.</p>
<h2>Templates d'email: l'aventure dont vous √™tes le h√©ros</h2>
<p><img src="/images/devoxx/me_conf3.jpg" alt="Photo d'Am√©lie sur sc√®ne"></p>
<p>Speakerine: <a href="https://twitter.com/AmelieBenoit33"><strong>Am√©lie Benoit</strong></a></p>
<p>Sources sur Github (slides + code): <a href="https://github.com/abenoit/email-templates">https://github.com/abenoit/email-templates</a></p>
<p><a href="https://youtu.be/pNavFCYWBFA">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Vous √™tes la personne qui s'est port√©e volontaire pour √©crire les templates HTML pour la prochaine campagne d'email de votre entreprise. Mais qui dit HTML, dit interpr√©tation de rendu. Votre exp√©rience avec Internet Explorer vous avait d√©j√† laiss√© quelques traces, et votre instinct vous dit - √† raison - de vous m√©fier tout autant des client mails qui liront votre template...</p>
<p>Un ami vous a parl√© de MJML, un framework sp√©cialement d√©di√© √† la cr√©ation d'emails responsive. Technologie qui vous est inconnue, vous vous lancez pour trouver la meilleure solution - de l'√©criture √† la validation - de vos templates d'emails.</p>
<h1>Keynotes</h1>
<p>Comme toujours, les keynotes ouvrent l'esprit sur notre √©cosyst√®me et ses r√©percutions. 6 keynotes r√©parties sur 2 jours, autant de sujets pr√©sent√©s r√©sum√©s dans les sketchnotes ci-dessous. Pour les 10 ans de Devoxx France, les organisateurs se sont pos√© la question: et alors, √† quoi ressemblera notre √©cosyst√®me dans 10 ans ? C'est donc sur le th√®me de la durabilit√© et du futur de la tech que se sont port√©es ces keynotes d'ouvertures.</p>
<h2>Jour 1</h2>
<p><img src="/images/devoxx/sketchnotes/keynote1.jpeg" alt="Sketchnote de la keynote d'ouverture, jour 1"></p>
<h3>Vid√©os</h3>
<ul>
<li><a href="https://youtu.be/kOXJEzD8GKw">DevoxxFR: 10 ans d√©j√† ! (A.Goncalves, Z.Cadi et N.Martignole)</a></li>
<li><a href="https://youtu.be/5-pe7CajTik">10 ans de Tech √† travers le podcast Niptech (B.Curdy, M.Monney et B.Freydt)</a></li>
<li><a href="https://youtu.be/hdAEGAwlK0M">La qu√™te d'une gouvernance collaborative du web (L√™ Nguy√™n Hoang)</a></li>
</ul>
<h2>Jour 2</h2>
<p><img src="/images/devoxx/sketchnotes/keynote2.jpeg" alt="Sketchnote de la keynote d'ouverture, jour 2"></p>
<h3>Vid√©os</h3>
<ul>
<li><a href="https://youtu.be/1uQPVOK45ow">Slow.tech : il est urgent de hacker le syst√®me ! (Fr√©d√©ric Bordage)</a></li>
<li><a href="https://youtu.be/fJwDbP3CB-0">LesBonsclics, plateforme p√©dagogique au service d'aidants num√©riques (T. Vandriessche)</a></li>
<li><a href="https://youtu.be/KMzwEbyriZA">Futurospective digitale : le futur est-il encore ce qu‚Äôil √©tait ? (Ludovic Cinquin)</a></li>
</ul>
<h1>Conf√©rences</h1>
<p>Je ne vais pas faire un r√©sum√© de toutes les conf√©rences de Devoxx France (il y en a beaucoup trop pour un si petit article !). Toutes les <a href="https://www.youtube.com/c/DevoxxFRvideos/playlists">vid√©os sont disponibles en ligne</a> si vous souhaitez les visualiser. Voici le palmar√®s des conf√©rences auxquelles j'ai pu assister et qui m'ont le plus marqu√© !</p>
<h2>Architecturoplastie hexagonale d‚Äôun backend Node.js</h2>
<p>En tant que dev front-end, c'√©tait plus par curiosit√© que j'ai pris place sur une conf√©rence de 3 heures sur l'archi hexagonale (bon j'avais fait du DDD mais je ne suis pas fluent en d√©v back-end). Et finalement, tous les concepts √©taient amen√©s tellement clairement, naturellement et avec des exemples concrets; je n'ai pas vu le temps passer, j'ai ri et pass√© un tr√®s bon moment.</p>
<p>√Ä travers une histoire de code legacy √† ramener √† la vie, les speakers am√®nent habillement des solutions pour aider √† re-travailler sur du code que l'on ne ma√Ætrise pas (legacy, effets de bords, pas / peu de tests, d√©pendences crois√©es...).</p>
<p><img src="/images/devoxx/sketchnotes/archi-hexa.jpeg" alt="Sketchnote de la conf√©rence &quot;Architecturoplastie hexagonale d‚Äôun backend Node.js&quot;"></p>
<p>Speakers:</p>
<ul>
<li><a href="https://twitter.com/JkNourry"><strong>Jordan Nourry</strong></a></li>
<li><a href="https://twitter.com/adrienjoly"><strong>Adrien Joly</strong></a></li>
<li><a href="https://twitter.com/JulienTopcu"><strong>Julien Top√ßu</strong></a></li>
</ul>
<p><a href="https://youtu.be/r2XMwAUqZBA">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Votre backend n'a m√™me pas 3 ans et pourtant, il n‚Äôest pas en forme. Il devient difficile d‚Äôy ajouter de nouvelles fonctionnalit√©s, de maintenir et/ou de refactorer l‚Äôexistant. Le code est intol√©rant √† la mont√©e de versions de librairies, pouvant lui causer une r√©gressionnite fonctionnelle aigu√´. Les tests deviennent douloureux √† l‚Äô√©criture.</p>
<p>Les pr√©c√©dents choix techniques ont comme effet secondaire de limiter ou verrouiller l‚Äô√©volution du logiciel, √† un point o√π il devient tentant de repartir de z√©ro. Votre backend commence lentement √† pourrir, son architecture s‚Äô√©tant scl√©ros√©e.</p>
<p>Mais savez-vous qu‚Äôil existe diff√©rents types de complexit√© logicielle ? Et que bien les identifier en les s√©parant avec un pattern d‚Äôarchitecture adapt√©, peut am√©liorer la p√©rennit√© de nos applications ? Et tout √ßa, quels que soient les frameworks que vous utilisez ?</p>
<p>Dans cette op√©ration √† code ouvert sous forme d‚Äôun mob-programming int√©ractif, venez d√©couvrir comment redonner un coup de jeune √† votre backend √† bout de souffle en le faisant migrer vers de l‚ÄôArchitecture Hexagonale.</p>
<h2>Pourquoi vous n'attirez pas et ne retiendrez pas les femmes dans vos √©quipes tech</h2>
<p>Mon coup de c≈ìur de Devoxx France 2022 ! Marcy donne des explications sur les sentiments des minorit√©s dans l'√©cosyst√®me de la tech et des cl√©s pour aider √† mieux les inclure en soci√©t√©.</p>
<p><img src="/images/devoxx/sketchnotes/marcy.jpeg" alt="Sketchnote de la conf√©rence &quot;Pourquoi vous n'attirez pas et ne retiendrez pas les femmes dans vos √©quipes tech&quot;"></p>
<p>Speakerine: <a href="https://twitter.com/MarcyChama"><strong>Marcy Ericka Charollois</strong></a></p>
<p><a href="https://youtu.be/6g0quTQqpr8">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Les femmes sont sous-repr√©sent√©es dans le domaine du num√©rique. Elles repr√©sentent √† ce jour uniquement 30% des salari√©s, tous m√©tiers confondus.</p>
<p>Que s¬¥est-il pass√© dans ce secteur professionnel pourtant domin√© par la gente feminine lors de sa g√©n√®se ? Les femmes ne se sentiraient-elles plus ou pas √† leurs places ?</p>
<p>Pourtant, les femmes communiquent. H√©las, bien souvent, on ne les √©coute pas. R√©sultat ? Migration vers des m√©tiers corollaires, brown-out, d√©sincarnation dans l'√©quipe, d√©mission, cr√©ation de la FemTech et de safe places comme lieux d'expression communautaire.</p>
<p>Alors, si vous voulez favoriser la mixit√© et que vous avez saisi que la cause des femmes dans la tech est une br√®che pour r√©soudre, en plus, la probl√©matique de la diversit√© et de l'inclusion, venez d√©couvrir comment am√©liorer vos pratiques !</p>
<p>Marcy Ericka Charollois :
Auteure en social tech, content strategist, fondatrice de Merci Marcy et The Safe Place. Ancienne r√©dactrice en cheffe de WeLoveDevs pendant 2 ans. J'y √©tais la premi√®re femme embauch√©e. Oui, en plus de √ßa, j‚Äô√©tais la premi√®re femme racis√©e et LGBTQIA+.</p>
<p>Je me rends vite compte que peu de personnes comme moi sont repr√©sent√©es dans la tech. J'ai alors choisi de prendre une plume plus engag√©e pour valoriser la diversit√© en brisant le ciment des faux-semblants des valeurs d'entreprise.</p>
<p>Je milite afin de cr√©er une coh√©sion v√©ritable au sein des √©quipes, en leur permettant d'incarner une culture d'inclusion authentique au del√† du bullshit.</p>
<h2>Mob programming, la v√©ritable approche du d√©veloppement en √©quipe</h2>
<p>On a probablement tous d√©j√† fait du mob-programming dans nos entreprises; c'est une pratique devenue r√©currente pour ces d√©veloppeurs de chez Ouest France. Retour sur leur exp√©rience et sur les points d'attention pour un mob-programming qui fonctionne !</p>
<p><img src="/images/devoxx/sketchnotes/mob-prog.jpeg" alt="Sketchnote de la conf√©rence &quot;Mob programming, la v√©ritable approche du d√©veloppement en √©quipe&quot;"></p>
<p>Speakers:</p>
<ul>
<li><a href="https://twitter.com/MaxOdye"><strong>Maxime Odye</strong></a></li>
<li><a href="https://twitter.com/m_pousse"><strong>Mathieu Pousse</strong></a></li>
</ul>
<p><a href="https://youtu.be/nTR7AxqI9WQ">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Sh√©rif, le manager, est en col√®re. Il vient de surprendre toute l‚Äô√©quipe de d√©veloppement autour d‚Äôune m√™me machine. Rendez-vous compte ! Apr√®s des comparaisons douteuses avec la DDE, il les a bien sermonn√©s et leur a ordonn√© de retourner √† leur poste de travail imm√©diatement, un peu de s√©rieux ! Avec Sh√©rif, la bamboche, c‚Äôest termin√© !</p>
<p>Malheureusement, des Sh√©rif, il en existe encore beaucoup dans les open-spaces de nos DSI. Partager un ordinateur entre plusieurs d√©veloppeurs, mais pourquoi donc ?</p>
<p>Le MOB programming est une pratique s‚Äôappuyant sur le Lean et sur Extreme Programming qui consiste √† r√©aliser une t√¢che, qu‚Äôelle soit technique ou non, √† plusieurs. Les groomings, planifications et autres r√©unions de conception, ne serait-ce pas d√©j√† des MOBs ?</p>
<p>De mythe √† r√©alit√©, nous vous proposons de faire un retour d‚Äôexp√©rience du MOB programming dans une √©quipe produit chez Ouest-France. Nous vous offrirons deux points de vue, celui du lead, pr√©sent depuis le d√©but du projet (5 ans) et celui d‚Äôun d√©veloppeur qui a rejoint l‚Äô√©quipe d√©but 2021.</p>
<h2>S'affranchir de la Pyramide des Tests</h2>
<p>Les tests et leur pyramide; on connait tous. Jonathan nous explique pourquoi il a remis en question tous ces principes, ce qui ne fonctionnait pas tout en expliquant ce qui reste important √† garder en t√™te lorsque l'on √©crit des tests pour son application.</p>
<p><img src="/images/devoxx/sketchnotes/pyramide-tests.jpeg" alt="Sketchnote de la conf√©rence &quot;S'affranchir de la Pyramide des Tests&quot;"></p>
<p>Speaker: <a href="https://twitter.com/JoBoccara"><strong>Jonathan Boccara</strong></a></p>
<p><a href="https://youtu.be/QL0HBeIAny0">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Tester son code c'est facile √† dire, mais √©crire des tests utiles dans du code en entreprise, c'est pas toujours facile √† faire.</p>
<p>En th√©orie les tests doivent nous aider, pourtant: - Le code ne se pr√™te pas toujours aux tests unitaires, - On se retrouve parfois √† refactorer les tests quand on refactore le code, - La pyramide des tests est souvent invers√©e, - Certains tests sont toujours verts, sauf quand ils sont rouges pour de mauvaises raisons, - On a beau tester le code, on a toujours des bugs, - Etc.</p>
<p>La meilleure fa√ßon d'√©viter ces probl√®mes est d'avoir les clefs pour choisir le bon test √† √©crire (ou √† ne pas √©crire!) en fonction du code √† tester.</p>
<p>Le but de cette pr√©sentation est de vous rendre autonome sur votre strat√©gie de tests, en vous pr√©sentant les tenants et aboutissants des diff√©rents types de test et du testing en g√©n√©ral.</p>
<p>En particulier vous verrez: - pourquoi la pyramide des tests est contre-productive - quand √©crire des tests unitaires et quand ne surtout pas en √©crire, - comment r√©diger des tests robustes et clairs - les diff√©rentes abstractions que l'on peut tester</p>
<p>Venez prendre du recul sur le testing et faites les bons choix dans vos tests!</p>
<h2>Cr√©er &amp; distribuer un plugin pour Kubernetes en quelques minutes ? Easy ! üôÇ</h2>
<p>Je suis √† nouveau sortie de ma zone de confort en assistant √† une conf√©rence sur un outil que je ne ma√Ætrise pas; Kubernetes. Et c'est tr√®s de fa√ßon extr√™mement accessible et sur fond d'une bonne humeur communicative qu'Aur√©lie et Ga√´lle nous expliquent pourquoi √©crire un plugin Kubernetes est int√©ressant selon le besoin, et le font m√™me en live !</p>
<p><img src="/images/devoxx/sketchnotes/kubernetes.jpeg" alt="Sketchnote de la conf√©rence &quot;Cr√©er &amp; distribuer un plugin pour Kubernetes en quelques minutes ? Easy !&quot;"></p>
<p>Speakerines:</p>
<ul>
<li><a href="https://twitter.com/aurelievache"><strong>Aur√©lie Vache</strong></a></li>
<li><a href="https://twitter.com/Gaelleacas"><strong>Ga√´lle Acas</strong></a></li>
</ul>
<p><a href="https://youtu.be/CMEJxGe-VoQ">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Kubernetes est assez complexe comme cela ‚Ä¶ mais savez vous qu‚Äôil est possible de rajouter des fonctionnalit√©s √† notre orchestrateur pr√©f√©r√© gr√¢ce aux plugins et √† un petit outil : Krew ?</p>
<p>Nous verrons dans ce talk, qu‚Äôen quelques minutes il est possible de cr√©er un plugin √† Kubernetes permettant de rendre plus user-friendly nos pods (selon la th√©matique saisonni√®re ^^). Mais ce n‚Äôest pas tout ! Le but est aussi de le partager aux autres et pour cela, Krew est ‚ÄúThe place to be‚Äù. A la fin de ce talk vous aurez toutes les billes en main afin de pouvoir r√©aliser &amp; partager votre propre plugin.</p>
<h2>OAuth2 expliqu√© simplement, m√™me si tu n'es pas un dev</h2>
<p>Un gros coup de c≈ìur aussi pour cette conf√©rence o√π j'ai pu d√©couvrir les talents oratoires de Julien Top√ßu (pour la seconde fois puisqu'il √©tait aussi sur la conf√©rence de l'archi hexagonale). Julien nous am√®ne dans un univers sc√©naris√© sur les explications et √©volutions qui nous ont amen√© au syst√®me qu'est aujourd'hui OAuth2, au travers d'all√©gories qui aident √† comprendre des termes et concepts parfois complexes. Clair (limpide m√™me) et ludique, ne manquez pas de regarder cette conf√©rence pour mieux comprendre ce qu'il se cache derri√®re ce m√©canisme d'authorisation !</p>
<p>Speaker: <a href="https://twitter.com/JulienTopcu"><strong>Julien Top√ßu</strong></a></p>
<p><a href="https://youtu.be/YdShQveywpo">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Il est tr√®s difficile aujourd'hui de d√©ployer une application sur le web sans se frotter √† OAuth2. Con√ßu pour mieux prot√©ger les utilisateurs et les utilisatrices, ce standard de d√©l√©gation d'autorisation s'est totalement impos√© dans l'industrie.</p>
<p>Cependant, n'avez-vous pas pleur√© en essayant de comprendre les concepts de OAuth2 ? On ne va pas se mentir, entre les diff√©rents r√¥les et la multitude de flows qui le constituent, il y a vraiment de quoi se perdre et sa complexit√© en d√©courage plus d'un ! Et pourtant, on ne peut pas s'en passer, donc on y va et g√©n√©ralement c'est douloureux‚Ä¶</p>
<p>Mais ne vous inqui√©tez pas, que vous ayez un profil tech ou non, ce talk va vous permettre d'enfin comprendre les m√©andres de OAuth simplement, dont la nouvelle version 2.1, en s'appuyant sur des analogies de la vie courante !</p>
<h2>Equity for software engineers</h2>
<p>Lorsque l'on rejoint une entreprise, seul le salaire ne compte pas dans la balance. En rejoignant une startup notamment, les employ√©s se voient offrir d'autres avantages aux acronymes un peu effrayants. Damien explique clairement et simplement √† quoi ils correspondent, et ce pourquoi il peut-√™tre int√©ressant de les prendre en compte !</p>
<blockquote>
<p>Il y a une erreur de calcul dans ce sketchnote, que je n'ai toujours pas corrig√©.</p>
</blockquote>
<p><img src="/images/devoxx/sketchnotes/equity.jpeg" alt="Sketchnote de la conf√©rence &quot;Equity for software engineers&quot;"></p>
<p>Speaker: <a href="https://twitter.com/damienpacaud"><strong>Damien Pacaud</strong></a></p>
<p><a href="https://youtu.be/ovx-8OWt6Fc">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: De plus en plus d entreprises proposent, en compl√©ment de la r√©mun√©ration, des ¬´ packages d‚Äô√©quity ¬ª.</p>
<p>C‚Äôest un cercle vertueux qui d√©marre en Europe et il peut √™tre utile de prendre ces √©l√©ments en compte lorsque vous cherchez votre nouvel emploi.</p>
<p>Bien souvent, les d√©veloppeurs en France consid√®rent peu ces √©l√©ments de r√©mun√©ration et n'y pr√™tent pas beaucoup d'attention.</p>
<p>Ce talk a pour but de d√©mystifier le monde bizarre des BSPCE, AGA, RSU, Warrants et autres Stock options.</p>
<h2>Record du monde</h2>
<p>Beno√Æt explique habillement ce que sont les DataClass en Python, une nouveaut√© dans Java 17 sous le nom de Records qui sont utiles dans un grand nombre de cas (notamment sur un back-end bas√© en DDD).</p>
<p>Speaker: <a href="https://twitter.com/binout"><strong>Beno√Æt Prioux</strong></a></p>
<p><a href="https://youtu.be/O1mclmBNiGM">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Les Records sont l‚Äôune des nouveaut√©s les plus attendues avec la sortie de Java 17. Des concepts similaires ont d√©j√† √©t√© introduits dans d‚Äôautres langages: data class en Kotlin, @dataclass en Python, case class en Scala.</p>
<p>Pattern assez simple de premier abord, les records vont devenir un v√©ritable indispensable de votre boite √† outils de d√©veloppeur.</p>
<p>Apr√®s un tour d‚Äôhorizon des impl√©mentations dans les diff√©rents langages, je vous propose de vous partager diff√©rents cas d‚Äôutilisations pour du pattern matching, du DDD et m√™me pour des monoids üò±.</p>
<h1>Conclusion</h1>
<p>√âvidemment, il reste encore plein de p√©pites √† d√©couvrir en replay sur la cha√Æne YouTube de Devoxx France.</p>
<p>Cette ann√©e encore, j'ai pass√© un excellent moment √† Devoxx France, 3 jours intenses, certes, mais tellement vivants et enrichissants ! Je n'ai m√™me pas parl√© des BoFs (Birth of Feather) qui permettent d'√©changer sur des th√®mes vari√©s en petit groupes (Coucou les Duchess !), le concert, la soir√©e vins &amp; fromages, la keynote de fermeture avec les cast-codeurs... Peut-√™tre l'occasion d'un second article √† ce sujet !</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>DevFest Lille 2022</title>
      <link href="/fr/blog/retour-sur-devfest-lille/"/>
      <updated>2022-07-31T00:00:00Z</updated>
      <id>/fr/blog/retour-sur-devfest-lille/</id>
      <content type="html">
        <![CDATA[
      <p>L'ann√©e 2022 marque le grand retour de toutes les conf√©rences en France. Apr√®s Devoxx France, j'ai eu l'immense honneur d'√™tre accept√©e et de pouvoir participer au DevFest Lille - une premi√®re fois pour moi au DevFest et √† Lille ! Retour sur mon exp√©rience en tant que speaker, partage des conf√©rences que j'ai aim√©es et de mes Sketchnotes.</p>
<h1>DevFest ?</h1>
<p>La conf√©rence se d√©roule sur une journ√©e, 3 salles de cin√©ma (oui oui!) ont √©t√© am√©nag√©es pour y recevoir un speaker et des participants. Si√®ges confortables, √©cran g√©ant... C'√©tait une exp√©rience assez incroyable !</p>
<p>J'ai √©t√© incroyablement surprise par tous les efforts que l'√©quipe d'organisation a fait sur:</p>
<ul>
<li>la diversit√©: je reconnais tous les efforts qui ont √©t√© faits pour obtenir une diversit√© au sein des speakers et des participants. Et le r√©sultat est l√† !</li>
<li>l'inclusivit√©: toutes les conf√©rences √©taient sous-titr√©es en direct afin de permettre aux personnes malentendantes de pouvoir suivre correctement.</li>
<li>l'aspect √©cologique: 0 d√©chet ! Toutes les boissons √©taient consign√©es, les repas et collations servis dans des contenants r√©utilisables. Quand on sait la charge que repr√©sente une conf√©rence, on est d√©j√† impressionn√©s, mais l√† c'est encore un autre niveau.</li>
</ul>
<p>√ânorme shoutout √† toute l'√©quipe pour cette organisation de folie !</p>
<p><img src="/images/devfest_lille/consignes.jpeg" alt="Photo d'un panneau indiquant la consigne pour les boissons"></p>
<h1>Mon exp√©rience speaker: React dans tous ses √©tats</h1>
<p>J'ai eu l'honneur d'√™tre s√©lectionn√©e pour pr√©senter un sujet sur la gestion des √©tats dans React.</p>
<p>D'autres articles seront bient√¥t disponibles pour partager sur le processus de soumission au CFP et de mon exp√©rience de speaker.</p>
<p><img src="/images/devfest_lille/me_conf4.jpeg" alt="Photo d'Am√©lie sur sc√®ne">
<img src="/images/devfest_lille/me_conf1.jpeg" alt="Photo d'Am√©lie sur sc√®ne"></p>
<blockquote>
<p>√Ä noter comme je parais minuscule devant cet √©cran d√©mesur√© !</p>
</blockquote>
<p>Speakerine: <strong>Am√©lie Benoit</strong></p>
<p>Sources sur Github (slides + code): <a href="https://github.com/abenoit/react-states">https://github.com/abenoit/react-states</a></p>
<p><a href="https://youtu.be/vRjtAhLz4Fs">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Que nos applications soient legacy ou compl√®tement nouvelles, la question du stockage et de la gestion des donn√©es est une constante. Il existe aujourd'hui de nombreuses fa√ßons de g√©rer ce state, mais peu de guidelines fortes.</p>
<p>Avec des exemples de code, nous verrons ensemble trois acteurs majeurs de la gestion du state en React aujourd'hui: de la solution native √† Recoil en passant par Redux-toolkit.</p>
<h1>Keynote d'ouverture</h1>
<p>Speaker: Nicolas Karasiewicz</p>
<p>Nicolas est √©veilleur de conscience et nous a expliqu√©, sous fond de beaucoup d'humour et d'autod√©rision √† quel point l'accessibilit√© est importante. Qu'un client handicap√© reste un client √† part enti√®re et qu'il existe aujourd'hui √©norm√©ment d'outils et processus √† notre disposition pour aider toute personne √† naviguer sur un site.</p>
<p><img src="/images/devfest_lille/sketchnotes/keynote.jpeg" alt="Sketchnote de la keynote d'ouverture"></p>
<p><a href="https://youtu.be/-yAQBGYbNeU">Video en replay</a></p>
<h1>Conf√©rences</h1>
<p>Je ne vais pas faire un r√©sum√© de toutes les conf√©rences, mais seulement de celles auxquelles j'ai pu assister et faire un compte rendu. Toutes les <a href="https://www.youtube.com/watch?v=-yAQBGYbNeU&amp;list=PLuZ_sYdawLiUbKK6sY1fh_cYtoT6IZg0B&amp;ab_channel=GDGFrance">vid√©os sont disponibles en ligne</a> si vous souhaitez les visualiser !</p>
<h2>Technically speaking: how to improve your documentation</h2>
<p>Speakerine: <a href="https://twitter.com/heyawhite"><strong>Alexandra White</strong></a></p>
<p>Talk en anglais pr√©sent√© par Alexandra, et qui nous explique pourquoi et comment √©crire des documentations efficientes pour nos projets. Amen√© avec beaucoup d'humour et de l√©g√®ret√©, elle nous donne ici des cl√©s pour nous aider dans ce process qui nous est parfois p√©nible et pourtant si important.</p>
<p><a href="/images/devfest_lille/sketchnotes/docs.jpeg"><img src="/images/devfest_lille/sketchnotes/docs.jpeg" alt="Sketchnote de la conf√©rence d'Alexandre White sur le th√®me &quot;Technically speaking: how to improve your documentation&quot;"></a>)</p>
<p><a href="https://youtu.be/b0p2U7IyCKs">Video en replay</a></p>
<h2>RGPD pour les d√©veloppeurs</h2>
<p>Speaker: <a href="https://twitter.com/fdelbrayelle"><strong>Fran√ßois Delbrayelle</strong></a></p>
<p>Fran√ßois revient sur les principes de la RGPD, par qui et pourquoi ces r√®gles ont √©t√© instaur√©es. Il nous donne ensuite des astuces pour int√©grer ces principes dans nos projets, au quotidien, afin de s'assurer que nous ne nous y √©cartons pas.</p>
<p><a href="/images/devfest_lille/sketchnotes/rgpd.jpeg"><img src="/images/devfest_lille/sketchnotes/rgpd.jpeg" alt="Sketchnote de la conf√©rence de Fran√ßois Delbrayelle sur le th√®me &quot;RGPD pour les d√©veloppeurs&quot;"></a></p>
<p><a href="https://youtu.be/wkbQ6Ec4qXY">Video en replay</a></p>
<h2>Au secours, l'accessibilit√© s'invite dans mes projets web !</h2>
<p>Speakerine: <a href="https://twitter.com/elbuffeto"><strong>Loriane Buffet</strong></a></p>
<p>J'ai beaucoup appr√©ci√© ce talk de Loriane sur l'accessibilit√©. Elle revient notamment sur des b√©n√©fices induits pour les personnes valides et / ou pour les projets qu'elle d√©monte. Un talk qui remet les choses √† leur place, donne des cl√©s sur les mauvaises pratiques et explique que rendre son site accessible concerne finalement tous les m√©tiers.</p>
<p><a href="/images/devfest_lille/sketchnotes/accessibilite.jpeg"><img src="/images/devfest_lille/sketchnotes/accessibilite.jpeg" alt="Sketchnote de la conf√©rence de Loriane Buffet &quot;Au secours, l'accessibilit√© s'invite dans mon projet web !&quot;"></a></p>
<p><a href="https://youtu.be/UBylwNBZEfk">Video en replay</a></p>
<h1>Conclusion</h1>
<p>√âvidemment, il reste encore plein de p√©pites √† d√©couvrir en replay sur la cha√Æne YouTube du GDG Lille. Je pense notamment √† la conf√©rence de <a href="https://youtu.be/212xdm2ZhRo">Florence Chabanois</a>, ou encore celle de <a href="https://youtu.be/yOjCb4CloTw">Rose Mazari</a> qui sont √† voir !</p>
<p>Pour une premi√®re fois, j'ai absolument ador√© mon exp√©rience au DevFest Lille. Excellente ambiance, valeurs fortes, accueil chaleureux, et des conf√©rences des plus int√©ressantes. Je me suis sentie honor√©e de faire partie des pr√©sentateurs, tant tous m'ont paru pertinents et int√©ressants dans leur pr√©sentation. J'esp√®re avoir l'occasion de renouveler l'aventure !</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>Conseils pour son challenge technique offline</title>
      <link href="/fr/blog/tips-offline-tech-challenge/"/>
      <updated>2022-08-05T00:00:00Z</updated>
      <id>/fr/blog/tips-offline-tech-challenge/</id>
      <content type="html">
        <![CDATA[
      <h1>Des tests ??</h1>
<p>Postuler √† un job dans la tech vient, le plus souvent, avec son lot de tests techniques. Live coding, deep dive, QCM... chaque type d'entretien comporte son lot d'avantages et inconv√©nients.</p>
<p>Ayant port√© les deux casquettes, maintenant je suis plut√¥t celle qui fait passer les entretiens. Je partage donc ici les conseils qui pourront vous aider si jamais vous en passez ou allez en passer.</p>
<blockquote>
<p>√áa ne veut pas dire qu'en suivant ces conseils, vous r√©ussirez forc√©ment votre entretien !</p>
</blockquote>
<p>Je vous donne ici des cl√©s pour avoir une approche plus claire, propre et organis√©e, ce qui sont des qualit√©s g√©n√©ralement recherch√©es par les personnes qui vont vous recevoir. √âvidemment, le niveau technique et les autres qualit√©s attendues d√©pendent de l'entreprise et du poste auquel vous postulez; mais ces conseils sont des √©l√©ments essentiels qui ne peuvent que jouer en votre faveur. Voire potentiellement jouer en votre d√©faveur s'ils n'y sont pas ou pas bien pr√©sent√©s.</p>
<p>On commence cette s√©rie avec des conseils pour <strong>le coding challenge offline</strong> ! J'ai nomm√© cet exercice avec des instructions plus ou moins pr√©cises que l'on vous donne √† travailler chez vous dans un temps donn√©.</p>
<p>‚ö†Ô∏è Je suis d√©veloppeuse front-end et donne des conseils plut√¥t port√© sur un test JS / TS, mais la plupart sont applicables quelque soit le langage et le type de challenge.</p>
<h1>Tips pour r√©ussir son coding challenge offline</h1>
<h2>Objectif: donner envie !</h2>
<p>Comme pour n'importe quel entretien, votre but doit toujours rester le m√™me: <strong>donner envie √† la personne en face de travailler avec vous.</strong></p>
<p>Dans le cas d'un test technique offline, pas d'interaction directe - le second objectif sera de <strong>donner envie √† la personne qui va parcourir votre projet de lire votre code, attiser sa curiosit√©.</strong></p>
<h2>Les instructions avec attention tu liras</h2>
<p>√áa para√Æt extr√™mement basique comme conseil, mais c'est pourtant le plus important. <strong>Lire les consignes, s'assurer de les comprendre.</strong> S'il y a le moindre doute, ne pas h√©siter √† demander des clarifications aux contacts qui vous ont envoy√© le coding challenge. Si les instructions sont longues ou complexes, on peut aussi les reformuler de son c√¥t√©, sous forme de TODO liste par exemple. Il est aussi important √† ce stade de d√©finir les √©l√©ments primaires et secondaires.</p>
<h3>Exemple</h3>
<pre><code>Instructions: Cr√©er une application web qui affiche un formulaire avec un champ texte et un bouton &quot;rechercher&quot;. Quand on clique sur &quot;rechercher&quot;, afficher une liste d'items parmi la liste [qu'on vous donne via API ou fichier JSON].
</code></pre>
<p>La demande est super floue, et c'est parfois fait expr√®s. Mais les √©l√©ments absolument essentiels dans cette demande sont :</p>
<ul>
<li>Une app web (une page, Vanilla, React, ce que vous voulez)</li>
<li>Un text field et un submit button</li>
<li>sur le click du submit button, afficher la liste des items en fonction de la recherche.
<ul>
<li>√ßa sous-entend g√©n√©ralement aussi un √©tat de chargement, o√π un loading spinner ou un texte appara√Ætra le temps du chargement</li>
</ul>
</li>
</ul>
<p>Et THAT'S IT !</p>
<p>√âvidemment, c'est ensuite √† votre appr√©ciation d'ajouter des bonus - qui par d√©finition ne doivent venir qu'apr√®s que les √©l√©ments principaux soient impl√©ment√©s:</p>
<ul>
<li>Une validation du formulaire</li>
<li>Un message sp√©cifique quand la liste retourn√©e est vide</li>
<li>Attention particuli√®re donn√©e √† l'UI / UX</li>
<li>Accessibilit√©</li>
<li>Internationalisation</li>
<li>D√©ployer l'application sur Github pages / Heroku / Netlify...</li>
<li>[une liste qui s'√©tend √† l'infini]</li>
</ul>
<h3>C'est vraiment important ?</h3>
<p>C'est seulement qu'une fois les instructions sont claires et comprises, et que vous avez d√©termin√© les √©l√©ments principaux, vous pouvez commencer √† voir comment coder. Les avantages de faire l'exercice dans ce sens est que:</p>
<ul>
<li>l'on s'assure de comprendre et de ne rien oublier par rapport aux instructions donn√©es. Le travail qui en d√©coule est plus organis√©.</li>
<li>la solution choisie peut d√©pendre des instructions: l'exercice demande du Vanilla / VueJS / React ? Est-ce que j'ai besoin d'une SPA / routing ? Est-ce que j'ai un state complexe √† g√©rer (spoiler: non la plupart du temps)? etc...</li>
</ul>
<p>Vous voil√† lanc√©s, et par d√©finition, vous prendrez vos premiers choix techniques et architecturaux, ce qui m'am√®ne au second point: restez aussi simples que possible.</p>
<h2>KISS - Keep It Simple Stupid</h2>
<p>M√™me si le challenge que l'on vous a envoy√© vous passionne, vous n'avez probablement pas ni envie ni le temps d'y consacrer un temps fou. Et personne [de cens√©] ne pourra vous le reprocher. Vous avez le droit de choisir telle librairie ou tel framework parce que vous √™tes √† l'aise avec pour aller vite. Ou de choisir une impl√©mentation plus na√Øve ou simple parce qu'elle suffit dans le cadre de ce projet.</p>
<p>Le test technique ne doit pas √™tre une application boost√©e aux st√©ro√Ødes parce que vous voulez montrer l'int√©gralit√© de vos connaissances. Appliquez-les plut√¥t intelligemment et simplement, selon le besoin de l'application (ce conseil est aussi valable pour n'importe quel projet). Quelque soient vos choix, pensez simplement √† le mentionner dans la section documentation - voir plus bas.</p>
<pre><code>Exemple: Je connais Redux sur le bout des doigts. L'application me demande d'afficher une liste d'items; ai-je vraiment besoin de l'int√©grer dans ce cadre ?
</code></pre>
<h2>De la coh√©rence tu garderas</h2>
<p>Le but est de cr√©er un code qui induit le moins de charge cognitive possible pour le reviewer. Une fa√ßon d'aider est d'avoir un code consistant: toujours les m√™mes spacings, organisation d'imports, convention de nommage des variables...</p>
<p>Il existe une multitude d'outils qui nous permettent d'avoir un code consistant et facile √† lire. Je nomme simplement <a href="https://eslint.org/">ESLint</a> et <a href="https://prettier.io/">Prettier</a>, qui prennent respectivement seulement quelques minutes √† installer.</p>
<p>Dans la m√™me id√©e, mettez-vous d'accord avec vous-m√™mes (ou selon les instructions) sur la fa√ßon dont vous allez nommer vos fonctions, composants et variables: camel case / snake case ? Noms de fichiers commen√ßant par une majuscule ? Hi√©rarchie de fichiers ? ...</p>
<h2>Clair tu seras</h2>
<p>Pas tant une question de consistance, mais veillez le plus possible √† garder un code simple √† lire. Une personne tierce va passer derri√®re vous et va chercher √† comprendre ce que vous avez cod√©. Il existe des moyens simples d'avoir un code simple √† lire:</p>
<ul>
<li><strong>nommer ses variables, composants et fonctions de fa√ßon significative</strong></li>
<li><strong>limiter l'indentation</strong>: une fonction ou un composant qui contient trop de niveaux d'indentation peut probablement √™tre red√©coup√© dans une fonction / composant / variable avec un nom repr√©sentatif</li>
<li><strong>√©viter les ternaires imbriqu√©es</strong></li>
<li><strong>√©viter les fichiers / fonctions trop longs.</strong> Cela peut passer par des partterns comme 1 composant / fonction = 1 responsabilit√©.</li>
</ul>
<p>Si vous sentez le besoin de rajouter un commentaire dans votre code pour aider √† comprendre un √©l√©ment en particulier, n'h√©sitez pas √† le faire. Cela peut cependant parfois √™tre un code smell indiquant que votre code pourrait √™tre √©crit diff√©remment ou refactoris√© - mais il peut parfois apporter de la valeur et de la clarification.</p>
<h2>Les API tokens tu ne commiteras pas</h2>
<p><strong>Les tokens ou cl√©s d'API ou tout autre secret dont vous pourriez avoir besoin ne doivent jamais</strong> √™tre commit√©s ni pr√©sents en clair dans votre code. Utilisez des variables d'environnement, et potentiellement une librairie pour acc√©der √† celles-ci (exemple: <a href="https://github.com/motdotla/dotenv#readme">dotenv</a>).</p>
<p>Globalement, c'est une bonne pratique pour toute application que vous pourriez √™tre amen√© √† √©crire.</p>
<h2>Des tests tu √©criras (enfin, si tu as le temps)</h2>
<p>Dans un monde parfait, on a le temps d'√©crire des tests: unitaires d'abord, int√©gration si possible et id√©alement un petit end-to-end test. Mais - comme dans la vraie vie - c'est chronophage. Si vous arrivez √† la fin du temps qui vous est imparti et que vous n'avez pas √©crit votre application en TDD (ce qui est rarement le cas pour du front-end), essayez si possible de rajouter au moins quelques tests unitaires / d'int√©grations sur le composant principal de votre application, ou sur la logique centrale. Cela permettra d'appuyer le fait que vous savez quand m√™me faire et d'avoir un cas d'exemple concret √† montrer.</p>
<p>Et si vous ne savez pas faire ou n'avez pas le temps, alors √©crivez-le dans la section &quot;Am√©liorations possibles&quot; dans votre compte rendu (voir section documentation ci-dessous). N'h√©sitez alors pas √† y indiquer les sc√©narios que vous auriez test√© et quelle librairie vous auriez pu utiliser - et pourquoi.</p>
<h2>Tes commit messages tu soigneras</h2>
<p>Comme dans tout projet, il est pr√©f√©rable de ne pas pousser tout son code d'un seul coup. Sans qu'ils ne soient parfaits, les commits de votre branche devraient refl√©ter l'impl√©mentation it√©rative de votre application.</p>
<pre><code>Exemple:
- init app
- create search form
- API call to search for the items
- list all the items
- loading state
- ...
</code></pre>
<p><img src="/images/offline-tech-challenge/commit-messages.jpeg" alt="comics on commit messages"></p>
<p>Pour aller plus loin sur les types de commits, il existe aujourd'hui des conventions de commit sur lesquels vous pouvez vous baser comme par exemple <a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional commits</a>.</p>
<h2>De la documentation tu √©criras</h2>
<p>Durant un entretien en direct on peut facilement d√©crire le fond de sa pens√©e; mais quand on est seuls face √† son exercice, c'est souvent quelque chose que l'on oublie de faire (m√™me dans le monde pro, m√™me les plus aguerris): <strong>expliquer, documenter</strong>.</p>
<blockquote>
<p>Le code seul ne suffit pas √† d√©crire vos intentions, choix et pens√©es.</p>
</blockquote>
<p>Lorsque vous rendrez votre test technique, une documentation pourra guider la personne qui relit votre challenge au travers de votre d√©marche.</p>
<p>√Ä la base de votre projet, cr√©ez un README.md s'il n'existe pas d√©j√† et d√©crivez votre parcours.</p>
<h3>Lancer l'application en local</h3>
<p>C'est la base, d√©crire comment lancer votre application ! Aidez les personnes qui vous relisent et faites-leur gagner du temps. Il s'agit √©galement d'une bonne pratique sur tout projet d'indiquer comment lancer l'application ainsi que les tests s'il y en a</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Install dependencies</span><br><span class="token function">npm</span> <span class="token function">install</span><br><br><span class="token comment"># Start application: this will run the app in the development mode.</span><br><span class="token comment"># Open http://localhost:3000 to view it in the browser.</span><br><span class="token function">npm</span> start<br><br><span class="token comment"># Run unit tests</span><br><span class="token function">npm</span> run <span class="token builtin class-name">test</span></code></pre>
<p>PS: pensez aussi √† tester une derni√®re fois ces commandes une derni√®res fois avant de rendre le projet (oui c'est du v√©cu).</p>
<h3>Choix techniques</h3>
<p>Les choix techniques pris par un candidat lors de son challenge importent peu, tant qu'il est capable d'expliquer pourquoi il les a fait. Sans explication, difficile de dire si le candidat est parti dessus parce que c'√©tait ce qu'il connaissait ou si c'√©tait par conviction que c'√©tait le meilleur choix pour ce cas d'usage. Et quand bien m√™me les explications peuvent amener √† poser des questions, les choix techniques et les explications qui y sont associ√©es pourront ensuite √™tre challeng√©s dans la suite du process.</p>
<pre><code>Exemple 1: L'application comportait un formulaire et un bouton, ce qui m'a amen√© √† cr√©er une validation du formulaire simple, directement dans le code. Cependant, sur une application de production qui aurait besoin de grossir, on pourra penser √† int√©grer une librairie comme par exemple [lib de validation de formulaire de votre choix].
</code></pre>
<pre><code>Exemple 2: Afin de d√©livrer une exp√©rience utilisateur agr√©able et de gagner du temps, j'ai utilis√© [nom de la librairie UI de votre choix]. Cette librairie est l√©g√®re et propose les composants dont j'avais besoin pour composer facilement l'interface de l'application.
</code></pre>
<p>Les explications peuvent porter sur le langage (pourquoi Typescript?), les librairies / frameworks utilis√©es, la fa√ßon dont vous avez architectur√© le code, le state management que vous avez (ou pas) utilis√©...</p>
<p>Tous vos choix d√©coulent de d√©cisions et de votre exp√©rience, et cette d√©marche de tout expliquer ne pourra qu'√©clairer la personne qui reliera votre challenge et aider √† vous conna√Ætre.</p>
<h3>Am√©liorations possibles</h3>
<p>Vous avez impl√©ment√© les √©l√©ments essentiels du challenge mais vous avez d√©pens√© tout votre quota de temps. Tout va bien ! D√©crivez les √©l√©ments que vous n'avez pas eu le temps d'impl√©menter.</p>
<p>Si jamais vous avez eu l'impression de tout impl√©menter - restez humbles, aucun code ni aucune app ne sont jamais parfaits. Cherchez les am√©liorations, les points manquants, techniques ou en termes de features. Il est extr√™mement important d'√™tre objectif sur son travail. Et si vous ne trouvez toujours pas quoi dire, vous pouvez toujours ajouter des notes sur comment l'application pourrait √©voluer dans le cas o√π on demanderait de la faire grossir (ajout de features ou des personnes pour travailler dessus, support de masse d'utilisateurs, accessibilit√©, optimisations...)</p>
<pre><code>Exemple 1 - l'am√©lioration tech: Je n'ai pas eu le temps d'impl√©menter les tests unitaires pour tous les composants. √Ä l'image de [ce composant que vous avez pu tester], il s'agirait de continuer ce process pour tous les autres composants de l'application.
</code></pre>
<pre><code>Exemple 2 - l'am√©lioration produit: l'API me retournait d'autres √©l√©ments qui auraient √©t√© int√©ressants de montrer aux utilisateurs comme [telle propri√©t√©]. De plus, il est possible d'ajouter une fonction de filtre / tri / pagination qui am√©liorerait l'exp√©rience utilisateur la liste retourn√©e est parfois tr√®s grande.
</code></pre>
<p>Cette section peut para√Ætre anodine, mais elle peut vous sauver si vous n'avez simplement pas eu le temps de tout faire. <strong>Pas la peine de cacher la poussi√®re sous le tapis</strong>, les personnes qui vont vous relire ne sont pas dupes; prenez les devant, expliquez tout, et cela vous permettra de vous d√©fendre lors d'un potentiel entretien de debriefing.</p>
<h2>Te relire √† la fin tu feras</h2>
<p>Enfin, quand vous aurez termin√©, je ne peux que vous encourager de sortir votre corps, de vous mettre √† la place de la personne qui va d√©couvrir votre projet. Relisez tout, le README, le code sur Github (ou peu importe la plateforme). Cela vous permettra d'identifier des points √† am√©liorer - que vous aurez soit le temps de corriger, soit de rajouter comme piste d'am√©lioration dans le README !</p>
<p>V√©rifiez √©galement que</p>
<ul>
<li>il ne reste aucun √©l√©ment du boilerplate que vous n'utilisez pas (assets, tests unitaires qui ne correspondent plus √† rien...)</li>
<li>l'intention derri√®re votre code est claire, que celui-ci est lisible</li>
</ul>
<h1>Conclusion</h1>
<p>Je me rends compte en √©crivant cet article que tous ces conseils peuvent para√Ætre comme beaucoup de charge mentale. Gardez simplement en t√™te que votre test n'a pas √† √™tre parfait. Aussi que:</p>
<ul>
<li><strong>la personne qui va vous lire est un humain - et potentiellement votre futur coll√®gue !</strong> Aidez le √† se projeter. Le plus simple vous rendez son travail, le plus satisfait il pourra √™tre - cela passe par de l'organisation et des explications</li>
<li><strong>vous avez un temps limit√© pour ce challenge</strong>: si vous n'en avez pas de d√©fini dans le test que l'on vous a envoy√©, donnez vous une limite que vous noterez dans le README. Ce n'est pas votre travail principal d'√©crire ce challenge et vous ne devriez pas y passer un temps d√©mesur√©.</li>
</ul>
<p>J'esp√®re que cet article vous a √©t√© utile, bon courage pour vos prochains tests techniques ! Je continuerai cette s√©rie sur les tests tech avec le prochain: les live coding challenges.</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>Live coding challenge tips</title>
      <link href="/fr/blog/tips-live-coding-challenge/"/>
      <updated>2022-08-27T00:00:00Z</updated>
      <id>/fr/blog/tips-live-coding-challenge/</id>
      <content type="html">
        <![CDATA[
      <p>On continue la s√©rie avec les tant redout√©s <strong>live coding challenges</strong> ! Personnellement, j'ai la boule au ventre rien que de lire l'email qui me dit que je devrais en passer un pendant un processus de recrutement (et √ßa fait 10 ans que je dev).</p>
<p>Postuler √† un job dans la tech vient, le plus souvent, avec son lot de tests techniques. Live coding, deep dive, QCM... chaque type d'entretien comporte son lot d'avantages et inconv√©nients.</p>
<p>Ayant port√© les deux casquettes, maintenant je suis plut√¥t celle qui fait passer les entretiens. Je partage donc ici les conseils qui pourront vous aider si jamais vous en passez ou allez en passer.</p>
<blockquote>
<p>√áa ne veut pas dire qu'en suivant ces conseils, vous r√©ussirez forc√©ment votre entretien !</p>
</blockquote>
<p>Je vous donne ici des cl√©s pour avoir une approche plus claire, propre et organis√©e, ce qui sont des qualit√©s g√©n√©ralement recherch√©es par les personnes qui vont vous recevoir. √âvidemment, le niveau technique et les autres qualit√©s attendues d√©pendent de l'entreprise et du poste auquel vous postulez; mais ces conseils sont des √©l√©ments essentiels qui ne peuvent que jouer en votre faveur. Voire potentiellement jouer en votre d√©faveur s'ils n'y sont pas ou pas bien pr√©sent√©s.</p>
<h1>Tips pour un live coding challenge</h1>
<h2>Le live coding challenge</h2>
<p>Le but c'est de r√©soudre un ou plusieurs exercices tech <strong>en live</strong> devant une ou plusieurs personnes. Ce genre de test est difficile et particuli√®rement redout√© car <strong>on se retrouve comme mis √† nu devant un ou plusieurs inconnus</strong> qui nous jugent en temps r√©el, ce qui laisse peu de place √† l'erreur. En tout cas, c'est ce qu'on se dit.</p>
<h2>Un test √† double sens</h2>
<p>Comme pour n'importe quel entretien, le but doit toujours rester le m√™me: <strong>donner envie √† la personne en face de travailler avec vous.</strong>. Mais cette fois c'est valable dans les deux sens; il faut aussi que les personnes en face vous donnent envie de travailler avec elles - se retrouver en face d'un *** pr√©tentieux donne tr√®s peu envie de rejoindre l'entreprise !</p>
<p>Mon tip est alors d'aborder cet entretien comme un √©change, une discussion voir m√™me comme une session de mob-programming. √áa peut-√™tre vos futurs coll√®gues que vous rencontrez pour la premi√®re fois. Ces personnes en face ne sont pas de simples spectateurs, ils doivent pouvoir vous accompagner, r√©pondre √† vos questions, vous d√©bloquer au besoin.</p>
<h3>Avant l'entretien, la pr√©paration</h3>
<p>Comme pour tout entretien, l'id√©al c'est d√©j√† de faire ses recherches avant et de pr√©parer des questions. En plus de donner du contexte, cela permet d'avoir des questions √† poser en fin d'entretien. On peut alors fouiller des conf√©rences, blogs techniques, publications... C'est non seulement important pour montrer son int√©r√™t dans l'entreprise, mais aussi et surtout pour montrer qu'on se projette.</p>
<p>Concernant la partie technique, le processus est parfois communiqu√© √† l'avance, ce qui rend alors relativement simple de savoir sur quoi plancher. Si non, plusieurs possibilit√©s et ressources:</p>
<ul>
<li>l'entreprise est connue: <a href="https://www.glassdoor.fr/">Glassdoor</a> recense des t√©moignages d'entretiens de candidats qui peuvent alors donner une indication du type d'exercice habituellement donn√©.</li>
<li>si rien n'appara√Æt sur GlassDoor, il est toujours possible de s'entra√Æner gratuitement sur des plateformes comme <a href="https://www.codingame.com/">CodingGame</a> sur des exercices plus ou moins complexes.</li>
</ul>
<h2>Pendant l'entretien</h2>
<h3>La consigne</h3>
<p>√áa para√Æt extr√™mement basique comme conseil, mais c'est pourtant le plus important. <strong>Lire les consignes, s'assurer de les comprendre. et √âCOUTER.</strong> S'il y a le moindre doute sur une consigne, poser des questions. Il vaut mieux faire r√©p√©ter que de partir √† c√¥t√© des ronces. Une fa√ßon plus habile de s'assurer qu'on a bien compris (ou justement qu'on n'est pas s√ªr de comprendre) est de reformuler l'exercice avec ses propres mots, et demander si c'est bien ce qui est attendu.</p>
<h2>Donner le meilleur de soi-m√™me</h2>
<p>Le syndr√¥me le plus courant que j'ai pu noter chez les d√©veloppeurs c'est <strong>l'over-engineering</strong>.</p>
<blockquote>
<p>&quot;Super easy, je sais faire, alors go pour un double reduce imbriqu√© !&quot;</p>
</blockquote>
<p>Expectation VS Reality: On oublie le return, les param√®tres sont dans le mauvais sens, on a mal initialis√© la fonction et on a fait une typo √† chaque mot.</p>
<p>Avec le stress, c'est en fait super difficile de sortir du code sur un √©diteur que vous ne ma√Ætrisez probablement pas - probablement sans auto-compl√©tion, et avec des gens qui regardent et dont vous pensez juger chaque typo. M√™me quand on a l'habitude. M√™me quand on est Senior !</p>
<p><mark>Globalement, et surtout quand on est stress√©, #1 tip: IT√âRER.</mark></p>
<pre><code>Exemple: commencer avec une premi√®re boucle `for`, des variables mut√©es par-ci par-l√†. Puis extraire dans une fonction. Puis utiliser plutot un `.map` (ou pourquoi pas un `reduce` si vraiment vous le sentez). etc
</code></pre>
<p><mark>Et le secret qui n'en est pas un - conseil #2 PARLER.</mark></p>
<p>Super important pour √©viter de s'isoler dans son exercice et faire comprendre son intention aux personnes en face. Elles pourront ainsi comprendre, vous aider ou vous challenger. <strong>Vous vous donnez une chance d'argumenter sur vos choix tout en montrant que vous √™tes objectif sur votre code.</strong></p>
<pre><code>Exemple : &quot;L√† je pars sur une approche na√Øve pour commencer, √ßa n'est pas id√©al parce que √ßa n'est pas une solution tr√®s performante mais je vais revenir dessus par la suite.&quot;
</code></pre>
<p><mark>Et si le r√©sultat n'est pas √† la hauteur escompt√©e <strong>d√©dramatisez</strong>.</mark></p>
<p>Les personnes en face savent que c'est un exercice stressant et que personne n'est en possession de tous ses moyens.</p>
<h2>G√©rer son stress</h2>
<p>Le jour J, qu'on se soit pr√©par√© pendant des semaines ou pas du tout, on est g√©n√©ralement <strong>hyper stress√©</strong> (sauf des personnes surhumaines dont je ne ferai jamais partie).</p>
<p>Le stress est en fait plut√¥t bon <strong>√† petite dose</strong>. Il permet d'√™tre concentr√©, de chercher √† se d√©passer pendant l'exercice. Mais il est primordial de ne pas se laisser d√©border. Plusieurs techniques existent:</p>
<ul>
<li>Se conna√Ætre</li>
<li>Pr√©parer l'entretien</li>
<li>Poser des questions</li>
</ul>
<h3>Se conna√Ætre</h3>
<p>C'est difficile de savoir conna√Ætre nos r√©actions avant d'√™tre confront√© √† la situation. Est-ce qu'en situation de stress devant des gens, j'ai tendance √† bloquer / faire des blagues / parler trop ... ?</p>
<p>C'est souvent apr√®s plusieurs entretiens qu'on apprend √† mieux se conna√Ætre, au travers de ce qu'on ressent mais aussi des feedback que l'on peut recevoir (ou demander √† recevoir) apr√®s l'entretien.</p>
<h2>Poser des questions</h2>
<p>Posez des questions en rebondissant sur le test ou remarques des intervenants; &quot;est-ce que vous utilisez une convention / lib / archi / process ? etc&quot;. Cela montre que vous vous int√©ressez et peut vous donner des indications sur la fa√ßon dont les √©quipes travaillent.</p>
<p>Entra√Ænez-vous si possible <strong>√† parler en codant</strong>. On a rarement ce besoin au quotidien, c'est donc assez peu naturel et probablement d√©stabilisant au d√©but. Au moins de lever la t√™te entre quelques lignes de code pour expliquer ce qu'on cherche √† faire. <strong>Demander de l'aide si on est bloqu√©.</strong></p>
<p>Garder le contact avec les personnes en face est primordial. Oui c'est un test technique mais il n'en reste pas moins qu'une part importante de la r√©ussite de ce challenge est attribu√©e √† la communication, au feeling car c'est une composante primordiale dans notre vie quotidienne (m√™me les devs oui oui).</p>
<h2>√Ä la fin de l'entretien</h2>
<p>C'est le moment id√©al de dire ce que vous avez pens√© du test et de votre performance. L'id√©al c'est de donner des pistes d'am√©liorations sur le code rendu, que ce soit technique, fonctionnel, d'un point de vue QA, performance, etc.</p>
<p><mark>Aucun code n'est parfait (et certainement pas du code issu d'un live coding challenge). Tip #3: rester objectif et humble !</mark></p>
<h1>Conclusion</h1>
<p>Les live coding challenges sont difficiles et stressants, c'est normal de les ressentir comme tels. Les personnes en face - nos futurs coll√®gues ? - sont l√† pour nous aider et nous mettre √† l'aise. Comptez-sur eux, mais aidez-les en gardant la communication ouverte continuellement.</p>

    ]]>
      </content>
    </entry>
  
</feed>