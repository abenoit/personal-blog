<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Am√©lie&#39;s thoughts</title>
  <subtitle></subtitle>
  <link href="{{locale}}/feed.xml" rel="self"/>
  <link href="/"/>
  
    <updated>2022-08-27T00:00:00Z</updated>
  
  <id></id>
  <author>
    <name>Am√©lie Benoit</name>
    <email>amelie.benoit33@gmail.com</email>
  </author>
  
    
    <entry>
      <title>My Devoxx 2022</title>
      <link href="/en/blog/my-devoxx/"/>
      <updated>2022-07-25T00:00:00Z</updated>
      <id>/en/blog/my-devoxx/</id>
      <content type="html">
        <![CDATA[
      <p>Devoxx France happened again in 2022 ! Going back on my experience as a Speaker, sharing the conferences I've liked and my Sketchnotes. 3 days summed up in a few words and drawings: Hold my beer, let's get started!</p>
<p><img src="/images/devoxx/hold-my-beer.jpeg" alt="Hold my beer"></p>
<h1>Devoxx France, in a few words</h1>
<p>Devoxx is the biggest conference for developers in France. It takes place yearly in Paris, lasts 3 whole days and gathers more tham 3200 people. More than 170 conferences are presented (under different formats: keynotes, universities, quickies, hands-on-labs and conferences) around very diverse themes (web, UX, Java, big data, cloud...).</p>
<p>In addition to being the year that marked its great return after a period of significant pandemic, the conference of passionate developers celebrated its 10th anniversary this year!</p>
<blockquote>
<p>Warning: Devoxx France being a French conference, most of the content are only available in French.</p>
</blockquote>
<h1>My experience as a Speaker</h1>
<p>It would have been a shame to write an article without speaking about my experience as a speaker, wouldn't it? üòÑ</p>
<p>I had the honnor to be selected to present two talks; a first one about the state managements in React, and another one about MJML email templates.</p>
<p>I'll publish other articles soon to share about the process of CFP submission and my experience as a speaker.</p>
<h2>[French] React: one hell of a state</h2>
<p><img src="/images/devoxx/me_conf4.jpg" alt="Photo of Am√©lie on stage"></p>
<p>Speakerine: <a href="https://twitter.com/AmelieBenoit33"><strong>Am√©lie Benoit</strong></a></p>
<p>Sources on Github (slides + code): <a href="https://github.com/abenoit/react-states">https://github.com/abenoit/react-states</a></p>
<p><a href="https://youtu.be/4iyYhLVxruI">Conference's replay</a></p>
<p>R√©sum√©: Que nos applications soient legacy ou compl√®tement nouvelles, la question du stockage et de la gestion des donn√©es est une constante. Il existe aujourd'hui de nombreuses fa√ßon de g√©rer ce state, mais peu de guidelines fortes.</p>
<p>Avec des exemples de code, nous verrons ensemble trois acteurs majeurs de la gestion du state en React aujourd'hui: de la solution native √† Recoil en passant par Redux-toolkit.</p>
<h2>[French] Email templates: you're the hero</h2>
<p><img src="/images/devoxx/me_conf3.jpg" alt="Photo of Am√©lie on stage"></p>
<p>Speakerine: <a href="https://twitter.com/AmelieBenoit33"><strong>Am√©lie Benoit</strong></a></p>
<p>Sources sur Github (slides + code): <a href="https://github.com/abenoit/email-templates">https://github.com/abenoit/email-templates</a></p>
<p><a href="https://youtu.be/pNavFCYWBFA">Conference replay</a></p>
<p>R√©sum√©: Vous √™tes la personne qui s'est port√©e volontaire pour √©crire les templates HTML pour la prochaine campagne d'email de votre entreprise. Mais qui dit HTML, dit interpr√©tation de rendu. Votre exp√©rience avec Internet Explorer vous avait d√©j√† laiss√© quelques traces, et votre instinct vous dit - √† raison - de vous m√©fier tout autant des client mails qui liront votre template...</p>
<p>Un ami vous a parl√© de MJML, un framework sp√©cialement d√©di√© √† la cr√©ation d'emails responsive. Technologie qui vous est inconnue, vous vous lancez pour trouver la meilleure solution - de l'√©criture √† la validation - de vos templates d'emails.</p>
<h1>Keynotes</h1>
<p>As always, keynotes open our mind about the ecosystem and its repercussions. 6 keynotes spread over 2 days, as many topics presented I've summed up in the skechnotes below. Pour Devoxx France's 10 year anniversary, the organizers wondered: what will our ecosystem look like in the next 10 years? This is under this theme of sustainability and future of tech that the keynote were all about.</p>
<h2>Jour 1</h2>
<p><img src="/images/devoxx/sketchnotes/keynote1.jpeg" alt="Opening keynote Sketchnote, day 1"></p>
<h3>Vid√©os</h3>
<ul>
<li><a href="https://youtu.be/kOXJEzD8GKw">DevoxxFR: 10 ans d√©j√† ! (A.Goncalves, Z.Cadi et N.Martignole)</a></li>
<li><a href="https://youtu.be/5-pe7CajTik">10 ans de Tech √† travers le podcast Niptech (B.Curdy, M.Monney et B.Freydt)</a></li>
<li><a href="https://youtu.be/hdAEGAwlK0M">La qu√™te d'une gouvernance collaborative du web (L√™ Nguy√™n Hoang)</a></li>
</ul>
<h2>Jour 2</h2>
<p><img src="/images/devoxx/sketchnotes/keynote2.jpeg" alt="Opening keynote Sketchnote, day 2"></p>
<h3>Vid√©os</h3>
<ul>
<li><a href="https://youtu.be/1uQPVOK45ow">Slow.tech : il est urgent de hacker le syst√®me ! (Fr√©d√©ric Bordage)</a></li>
<li><a href="https://youtu.be/fJwDbP3CB-0">LesBonsclics, plateforme p√©dagogique au service d'aidants num√©riques (T. Vandriessche)</a></li>
<li><a href="https://youtu.be/KMzwEbyriZA">Futurospective digitale : le futur est-il encore ce qu‚Äôil √©tait ? (Ludovic Cinquin)</a></li>
</ul>
<h1>Conf√©rences</h1>
<p>I am not going to make a list of ALL the conferences presented at Devoxx France (there are way too many of them for such a small article!). All the <a href="https://www.youtube.com/c/DevoxxFRvideos/playlists">videos are published online</a> if you would like to watch them. Here is a palmares of the conferences I had the chance to attend to and that I liked the most!</p>
<h2>Architecturoplastie hexagonale d‚Äôun backend Node.js</h2>
<p>As a front-end developer, it was more out of curiosity that I sat down for a 3 hour conference about hexagonal architecture (I've already played with DDD but I can't say that I'm a fluent back-end dev). In the end, all the concepts were naturally and clerly brought with concrete example; I did not see the time passed, I laughed and had a very nive moment.</p>
<p>Through a story of legacy code to bring back to life, the speakers provide solutions to help re-work on code that no one masters (legacy, side effects, no / few tests, cross dependencies ...).</p>
<p><img src="/images/devoxx/sketchnotes/archi-hexa.jpeg" alt="Sketchnote of the conference &quot;Architecturoplastie hexagonale d‚Äôun backend Node.js&quot;"></p>
<p>Speakers:</p>
<ul>
<li><a href="https://twitter.com/JkNourry"><strong>Jordan Nourry</strong></a></li>
<li><a href="https://twitter.com/adrienjoly"><strong>Adrien Joly</strong></a></li>
<li><a href="https://twitter.com/JulienTopcu"><strong>Julien Top√ßu</strong></a></li>
</ul>
<p><a href="https://youtu.be/r2XMwAUqZBA">Conference replay</a></p>
<p>R√©sum√©: Votre backend n'a m√™me pas 3 ans et pourtant, il n‚Äôest pas en forme. Il devient difficile d‚Äôy ajouter de nouvelles fonctionnalit√©s, de maintenir et/ou de refactorer l‚Äôexistant. Le code est intol√©rant √† la mont√©e de versions de librairies, pouvant lui causer une r√©gressionnite fonctionnelle aigu√´. Les tests deviennent douloureux √† l‚Äô√©criture.</p>
<p>Les pr√©c√©dents choix techniques ont comme effet secondaire de limiter ou verrouiller l‚Äô√©volution du logiciel, √† un point o√π il devient tentant de repartir de z√©ro. Votre backend commence lentement √† pourrir, son architecture s‚Äô√©tant scl√©ros√©e.</p>
<p>Mais savez-vous qu‚Äôil existe diff√©rents types de complexit√© logicielle ? Et que bien les identifier en les s√©parant avec un pattern d‚Äôarchitecture adapt√©, peut am√©liorer la p√©rennit√© de nos applications ? Et tout √ßa, quels que soient les frameworks que vous utilisez ?</p>
<p>Dans cette op√©ration √† code ouvert sous forme d‚Äôun mob-programming int√©ractif, venez d√©couvrir comment redonner un coup de jeune √† votre backend √† bout de souffle en le faisant migrer vers de l‚ÄôArchitecture Hexagonale.</p>
<h2>Pourquoi vous n'attirez pas et ne retiendrez pas les femmes dans vos √©quipes tech</h2>
<p>My favorite talk of Devoxx France 2022! Marcu gives explanations about minorities feelings within the tech ecosystem, along with some keys to help them to be included better.</p>
<p><img src="/images/devoxx/sketchnotes/marcy.jpeg" alt="Conference Sketchnote &quot;Pourquoi vous n'attirez pas et ne retiendrez pas les femmes dans vos √©quipes tech&quot;"></p>
<p>Speaker: <a href="https://twitter.com/MarcyChama"><strong>Marcy Ericka Charollois</strong></a></p>
<p><a href="https://youtu.be/6g0quTQqpr8">Conference replay</a></p>
<p>R√©sum√©: Les femmes sont sous-repr√©sent√©es dans le domaine du num√©rique. Elles repr√©sentent √† ce jour uniquement 30% des salari√©s, tous m√©tiers confondus.</p>
<p>Que s¬¥est-il pass√© dans ce secteur professionnel pourtant domin√© par la gente feminine lors de sa g√©n√®se ? Les femmes ne se sentiraient-elles plus ou pas √† leurs places ?</p>
<p>Pourtant, les femmes communiquent. H√©las, bien souvent, on ne les √©coute pas. R√©sultat ? Migration vers des m√©tiers corollaires, brown-out, d√©sincarnation dans l'√©quipe, d√©mission, cr√©ation de la FemTech et de safe places comme lieux d'expression communautaire.</p>
<p>Alors, si vous voulez favoriser la mixit√© et que vous avez saisi que la cause des femmes dans la tech est une br√®che pour r√©soudre, en plus, la probl√©matique de la diversit√© et de l'inclusion, venez d√©couvrir comment am√©liorer vos pratiques !</p>
<p>Marcy Ericka Charollois :
Auteure en social tech, content strategist, fondatrice de Merci Marcy et The Safe Place. Ancienne r√©dactrice en cheffe de WeLoveDevs pendant 2 ans. J'y √©tais la premi√®re femme embauch√©e. Oui, en plus de √ßa, j‚Äô√©tais la premi√®re femme racis√©e et LGBTQIA+.</p>
<p>Je me rends vite compte que peu de personnes comme moi sont repr√©sent√©es dans la tech. J'ai alors choisi de prendre une plume plus engag√©e pour valoriser la diversit√© en brisant le ciment des faux-semblants des valeurs d'entreprise.</p>
<p>Je milite afin de cr√©er une coh√©sion v√©ritable au sein des √©quipes, en leur permettant d'incarner une culture d'inclusion authentique au del√† du bullshit.</p>
<h2>Mob programming, la v√©ritable approche du d√©veloppement en √©quipe</h2>
<p>We probably all have already had mob-programming sessions in our companies; this has become a recurring practice for those developers at Ouest France. Return on their experience and share of the attention points for a mob-programming that works!</p>
<p><img src="/images/devoxx/sketchnotes/mob-prog.jpeg" alt="Conference Sketchnote &quot;Mob programming, la v√©ritable approche du d√©veloppement en √©quipe&quot;"></p>
<p>Speakers:</p>
<ul>
<li><a href="https://twitter.com/MaxOdye"><strong>Maxime Odye</strong></a></li>
<li><a href="https://twitter.com/m_pousse"><strong>Mathieu Pousse</strong></a></li>
</ul>
<p><a href="https://youtu.be/nTR7AxqI9WQ">Conference replay</a></p>
<p>R√©sum√©: Sh√©rif, le manager, est en col√®re. Il vient de surprendre toute l‚Äô√©quipe de d√©veloppement autour d‚Äôune m√™me machine. Rendez-vous compte ! Apr√®s des comparaisons douteuses avec la DDE, il les a bien sermonn√©s et leur a ordonn√© de retourner √† leur poste de travail imm√©diatement, un peu de s√©rieux ! Avec Sh√©rif, la bamboche, c‚Äôest termin√© !</p>
<p>Malheureusement, des Sh√©rif, il en existe encore beaucoup dans les open-spaces de nos DSI. Partager un ordinateur entre plusieurs d√©veloppeurs, mais pourquoi donc ?</p>
<p>Le MOB programming est une pratique s‚Äôappuyant sur le Lean et sur Extreme Programming qui consiste √† r√©aliser une t√¢che, qu‚Äôelle soit technique ou non, √† plusieurs. Les groomings, planifications et autres r√©unions de conception, ne serait-ce pas d√©j√† des MOBs ?</p>
<p>De mythe √† r√©alit√©, nous vous proposons de faire un retour d‚Äôexp√©rience du MOB programming dans une √©quipe produit chez Ouest-France. Nous vous offrirons deux points de vue, celui du lead, pr√©sent depuis le d√©but du projet (5 ans) et celui d‚Äôun d√©veloppeur qui a rejoint l‚Äô√©quipe d√©but 2021.</p>
<h2>S'affranchir de la Pyramide des Tests</h2>
<p>The pyramid of tests, we all know about it. Jonathan explains why he came into questioning all of those principles, what wasn't working, and what is important to keep in mind when we write tests in our application.</p>
<p><img src="/images/devoxx/sketchnotes/pyramide-tests.jpeg" alt="Conference Sketchnote &quot;S'affranchir de la Pyramide des Tests&quot;"></p>
<p>Speaker: <a href="https://twitter.com/JoBoccara"><strong>Jonathan Boccara</strong></a></p>
<p><a href="https://youtu.be/QL0HBeIAny0">Conference replay</a></p>
<p>R√©sum√©: Tester son code c'est facile √† dire, mais √©crire des tests utiles dans du code en entreprise, c'est pas toujours facile √† faire.</p>
<p>En th√©orie les tests doivent nous aider, pourtant: - Le code ne se pr√™te pas toujours aux tests unitaires, - On se retrouve parfois √† refactorer les tests quand on refactore le code, - La pyramide des tests est souvent invers√©e, - Certains tests sont toujours verts, sauf quand ils sont rouges pour de mauvaises raisons, - On a beau tester le code, on a toujours des bugs, - Etc.</p>
<p>La meilleure fa√ßon d'√©viter ces probl√®mes est d'avoir les clefs pour choisir le bon test √† √©crire (ou √† ne pas √©crire!) en fonction du code √† tester.</p>
<p>Le but de cette pr√©sentation est de vous rendre autonome sur votre strat√©gie de tests, en vous pr√©sentant les tenants et aboutissants des diff√©rents types de test et du testing en g√©n√©ral.</p>
<p>En particulier vous verrez: - pourquoi la pyramide des tests est contre-productive - quand √©crire des tests unitaires et quand ne surtout pas en √©crire, - comment r√©diger des tests robustes et clairs - les diff√©rentes abstractions que l'on peut tester</p>
<p>Venez prendre du recul sur le testing et faites les bons choix dans vos tests!</p>
<h2>Cr√©er &amp; distribuer un plugin pour Kubernetes en quelques minutes ? Easy ! üôÇ</h2>
<p>Once again, I stepped out of my comfort zone by assisting a conference on a tool I do not master: Kubernetes. And it was in a very accessible way and with a background of good mood that Aur√©lie and Ga√´lle explained to us why writing a Kubernetes plugin is interesting according to need, and they even wrote one live!</p>
<p><img src="/images/devoxx/sketchnotes/kubernetes.jpeg" alt="Conference Sketchnote &quot;Cr√©er &amp; distribuer un plugin pour Kubernetes en quelques minutes ? Easy !&quot;"></p>
<p>Speakerines:</p>
<ul>
<li><a href="https://twitter.com/aurelievache"><strong>Aur√©lie Vache</strong></a></li>
<li><a href="https://twitter.com/Gaelleacas"><strong>Ga√´lle Acas</strong></a></li>
</ul>
<p><a href="https://youtu.be/CMEJxGe-VoQ">Conference replay</a></p>
<p>R√©sum√©: Kubernetes est assez complexe comme cela ‚Ä¶ mais savez vous qu‚Äôil est possible de rajouter des fonctionnalit√©s √† notre orchestrateur pr√©f√©r√© gr√¢ce aux plugins et √† un petit outil : Krew ?</p>
<p>Nous verrons dans ce talk, qu‚Äôen quelques minutes il est possible de cr√©er un plugin √† Kubernetes permettant de rendre plus user-friendly nos pods (selon la th√©matique saisonni√®re ^^). Mais ce n‚Äôest pas tout ! Le but est aussi de le partager aux autres et pour cela, Krew est ‚ÄúThe place to be‚Äù. A la fin de ce talk vous aurez toutes les billes en main afin de pouvoir r√©aliser &amp; partager votre propre plugin.</p>
<h2>OAuth2 expliqu√© simplement, m√™me si tu n'es pas un dev</h2>
<p>One of my favorite conference, during which I have discovered the public speaking skills of Julien Top√ßu (for the second time actually, as he was also presenting the conference about hegaxonal architecture). Julien brings us in a scripted universe about explanations and evolutions that brought us with today's implementation of OAuth 2, through allegories that help us to understand terms and concepts that can be complex. Clear (even limpid) and fun, don't miss watching this conference to better understand what is hidden behind this authorization mechanism!</p>
<p>Speaker: <a href="https://twitter.com/JulienTopcu"><strong>Julien Top√ßu</strong></a></p>
<p><a href="https://youtu.be/YdShQveywpo">Conf√©rence replay</a></p>
<p>R√©sum√©: Il est tr√®s difficile aujourd'hui de d√©ployer une application sur le web sans se frotter √† OAuth2. Con√ßu pour mieux prot√©ger les utilisateurs et les utilisatrices, ce standard de d√©l√©gation d'autorisation s'est totalement impos√© dans l'industrie.</p>
<p>Cependant, n'avez-vous pas pleur√© en essayant de comprendre les concepts de OAuth2 ? On ne va pas se mentir, entre les diff√©rents r√¥les et la multitude de flows qui le constituent, il y a vraiment de quoi se perdre et sa complexit√© en d√©courage plus d'un ! Et pourtant, on ne peut pas s'en passer, donc on y va et g√©n√©ralement c'est douloureux‚Ä¶</p>
<p>Mais ne vous inqui√©tez pas, que vous ayez un profil tech ou non, ce talk va vous permettre d'enfin comprendre les m√©andres de OAuth simplement, dont la nouvelle version 2.1, en s'appuyant sur des analogies de la vie courante !</p>
<h2>Equity for software engineers</h2>
<p>When joining a company, the salary is important but it shouldn't be the only things to look at. For example with startups, employees are offered other advantages - with sometimes scarny acronyms. Damien explains clearly and in a simple manner what they correspond to, and why it could be interesting to take them into account!</p>
<blockquote>
<p>There is a calculation mistake in this sketchnote, I haven't fixed it yet.</p>
</blockquote>
<p><img src="/images/devoxx/sketchnotes/equity.jpeg" alt="Conference Sketchnote &quot;Equity for software engineers&quot;"></p>
<p>Speaker: <a href="https://twitter.com/damienpacaud"><strong>Damien Pacaud</strong></a></p>
<p><a href="https://youtu.be/ovx-8OWt6Fc">Conf√©rence replay</a></p>
<p>R√©sum√©: De plus en plus d entreprises proposent, en compl√©ment de la r√©mun√©ration, des ¬´ packages d‚Äô√©quity ¬ª.</p>
<p>C‚Äôest un cercle vertueux qui d√©marre en Europe et il peut √™tre utile de prendre ces √©l√©ments en compte lorsque vous cherchez votre nouvel emploi.</p>
<p>Bien souvent, les d√©veloppeurs en France consid√®rent peu ces √©l√©ments de r√©mun√©ration et n'y pr√™tent pas beaucoup d'attention.</p>
<p>Ce talk a pour but de d√©mystifier le monde bizarre des BSPCE, AGA, RSU, Warrants et autres Stock options.</p>
<h2>Record du monde</h2>
<p>Beno√Æt explains very clearly what DataClasses are in Python, a new feature also appearing in Java 17 under the name of Records. They are useful in a large number of cases (especially on a DDD-based back-end).</p>
<p>Speaker: <a href="https://twitter.com/binout"><strong>Beno√Æt Prioux</strong></a></p>
<p><a href="https://youtu.be/O1mclmBNiGM">Conf√©rence replay</a></p>
<p>R√©sum√©: Les Records sont l‚Äôune des nouveaut√©s les plus attendues avec la sortie de Java 17. Des concepts similaires ont d√©j√† √©t√© introduits dans d‚Äôautres langages: data class en Kotlin, @dataclass en Python, case class en Scala.</p>
<p>Pattern assez simple de premier abord, les records vont devenir un v√©ritable indispensable de votre boite √† outils de d√©veloppeur.</p>
<p>Apr√®s un tour d‚Äôhorizon des impl√©mentations dans les diff√©rents langages, je vous propose de vous partager diff√©rents cas d‚Äôutilisations pour du pattern matching, du DDD et m√™me pour des monoids üò±.</p>
<h1>Conclusion</h1>
<p>Of course, there are still plenty of amazing content I haven't talked about and that is available to watch on Devoxx France's YouTube channel.</p>
<p>This year, once again, I spent an incredible moment at Devoxx France. 3 days, intense but with so many people I met and so fulfilling! I did not speak about the BoFs (Birth of Feather) where a small group of people can share about various topics (hello Duchess France!), the concert, the wine &amp; cheese event, the closing keynote provided by the cast-codeurs... Maybe the opportunity to write a second article!</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>DevFest Lille 2022</title>
      <link href="/en/blog/devfest-lille/"/>
      <updated>2022-07-31T00:00:00Z</updated>
      <id>/en/blog/devfest-lille/</id>
      <content type="html">
        <![CDATA[
      <p>2022, and all the big conferences in France are coming back to life. After Devoxx France, I had the great honor of being accepted and to attend DevFest Lille - a first one for me! Going back on my experience as a Speaker, sharing the conferences I've liked and my Sketchnotes.</p>
<h1>DevFest ?</h1>
<p>The conference lasts one whole day, during which 3 cinema rooms have been re-organized to receive speakers and participants. Comfortable seats, giant screen... It was quite an incredible experience!</p>
<p>I was incredibly surprised by all the efforts the organization team put into:</p>
<ul>
<li>diversity: I recognize all the efforts made to achieve diversity among speakers and participants. And the result is there !</li>
<li>inclusiveness: all the conferences were subtitled in live in order to allow people with hearing loss to be able to follow correctly.</li>
<li>sustainability: 0 waste! All drinks were returnable, meals and snacks served in reusable containers. When we know the load that a conference represents, I was already impressed, but this is yet another level.</li>
</ul>
<p>Huge shoutout to the whole team for this crazy organization!
<img src="/images/devfest_lille/consignes.jpeg" alt="Photo of a pannel indicating where to return drinks"></p>
<h1>[French] My speaker experience: React dans tous ses √©tats</h1>
<p>I had the honnor to be selected to present a talks about state management in React.</p>
<p>I'll publish other articles soon to share about the process of CFP submission and my experience as a speaker.</p>
<p><img src="/images/devfest_lille/me_conf4.jpeg" alt="Photo of Am√©lie on stage">
<img src="/images/devfest_lille/me_conf1.jpeg" alt="Photo of Am√©lie on stage"></p>
<blockquote>
<p>Please note how tiny I look in front of this huge screen</p>
</blockquote>
<p>Speaker: <strong>Am√©lie Benoit</strong></p>
<p>Sources sur Github (slides + code): <a href="https://github.com/abenoit/react-states">https://github.com/abenoit/react-states</a></p>
<p><a href="https://youtu.be/vRjtAhLz4Fs">Vid√©o de la conf√©rence</a></p>
<p>R√©sum√©: Que nos applications soient legacy ou compl√®tement nouvelles, la question du stockage et de la gestion des donn√©es est une constante. Il existe aujourd'hui de nombreuses fa√ßon de g√©rer ce state, mais peu de guidelines fortes.</p>
<p>Avec des exemples de code, nous verrons ensemble trois acteurs majeurs de la gestion du state en React aujourd'hui: de la solution native √† Recoil en passant par Redux-toolkit.</p>
<h1>[French] Keynote d'ouverture</h1>
<p>Speaker: Nicolas Karasiewicz</p>
<p>Nicolas is a conscience awakener and explained to us, with a lot of humor and self-mockery, how important accessibility is. That a disabled customer remains a full-fledged customer and there are now a lot of tools and processes at our disposal to help anyone navigate a website.</p>
<p><img src="/images/devfest_lille/sketchnotes/keynote.jpeg" alt="Sketchnote of the opening keynote"></p>
<p><a href="https://youtu.be/-yAQBGYbNeU">Conference Replay</a></p>
<h1>Conf√©rences</h1>
<p>Je ne vais pas faire un r√©sum√© de toutes les conf√©rences, mais seulement de celles auxquelles j'ai pu assister et faire un compte rendu. Toutes les <a href="https://www.youtube.com/watch?v=-yAQBGYbNeU&amp;list=PLuZ_sYdawLiUbKK6sY1fh_cYtoT6IZg0B&amp;ab_channel=GDGFrance">vid√©os sont disponibles en ligne</a> si vous souhaitez les visualiser !</p>
<h2>[English] Technically speaking: how to improve your documentation</h2>
<p>Speaker: <a href="https://twitter.com/heyawhite"><strong>Alexandra White</strong></a></p>
<p>Talk en anglais pr√©sent√© par Alexandra, et qui nous explique pourquoi et comment √©crire des documentations efficientes pour nos projets. Amen√© avec beaucoup d'humour et de l√©g√®ret√©, elle nous donne ici des cl√©s pour nous aider dans ce process qui nous est parfois p√©nible et pourtant si important.</p>
<p><a href="/images/devfest_lille/sketchnotes/docs.jpeg"><img src="/images/devfest_lille/sketchnotes/docs.jpeg" alt="Conference Sketchnote of Alexandre White &quot;Technically speaking: how to improve your documentation&quot;"></a>)</p>
<p><a href="https://youtu.be/b0p2U7IyCKs">Conference Replay</a></p>
<h2>[French] RGPD pour les d√©veloppeurs</h2>
<p>Speaker: <a href="https://twitter.com/fdelbrayelle"><strong>Fran√ßois Delbrayelle</strong></a></p>
<p>Fran√ßois goes through GDPR principles, by whom and why these rules were introduced. He gives tips for integrating these principles into our projects on a daily basis, in order to ensure that we do not deviate from them.</p>
<p><a href="/images/devfest_lille/sketchnotes/rgpd.jpeg"><img src="/images/devfest_lille/sketchnotes/rgpd.jpeg" alt="Conference Sketchnote of Fran√ßois Delbrayelle &quot;RGPD pour les d√©veloppeurs&quot;"></a></p>
<p><a href="https://youtu.be/wkbQ6Ec4qXY">Conference Replay</a></p>
<h2>[French] Au secours, l'accessibilit√© s'invite dans mes projets web !</h2>
<p>Speaker: <a href="https://twitter.com/elbuffeto"><strong>Loriane Buffet</strong></a></p>
<p>I really enjoyed Loriane's talk on accessibility. In particular when she dismantles the benefits induced for valid people people and/or projects. A talk that puts things in their place, gives keys to bad practices and explains that making your site accessible ultimately concerns all professions.</p>
<p><a href="/images/devfest_lille/sketchnotes/accessibilite.jpeg"><img src="/images/devfest_lille/sketchnotes/accessibilite.jpeg" alt="Conference Sketchnote of Loriane Buffet &quot;Au secours, l'accessibilit√© s'invite dans mon projet web !&quot;"></a></p>
<p><a href="https://youtu.be/UBylwNBZEfk">Conference Replay</a></p>
<h1>Conclusion</h1>
<p>Obviously, there are still plenty of incredible conferences to discover in <a href="https://www.youtube.com/watch?v=-yAQBGYbNeU&amp;list=PLuZ_sYdawLiUbKK6sY1fh_cYtoT6IZg0B&amp;ab_channel=GDGFrance">replay on the GDG Lille YouTube channel</a>. I am thinking in particular of the conference in <a href="https://youtu.be/212xdm2ZhRo">Florence Chabanois</a> about recruiting women, or even the one from <a href="https://youtu.be/yOjCb4CloTw">Rose Mazari</a> about digital sovereignty.</p>
<p>For my first time there, I absolutely loved my experience at DevFest Lille. Excellent atmosphere, strong values, warm welcome, and the most interesting conferences. I felt truly honored to be one of the presenters, as everyone were relevant and interesting in their presentation. I hope to have the opportunity to renew this adventure!</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>Conseils pour son challenge technique offline</title>
      <link href="/en/blog/tips-offline-tech-challenge/"/>
      <updated>2022-08-05T00:00:00Z</updated>
      <id>/en/blog/tips-offline-tech-challenge/</id>
      <content type="html">
        <![CDATA[
      <h1>Tech tests??</h1>
<p>Applying for a job in tech usually comes with its set of technical tests. Live coding, deep dive, MCQ... each type of interview has its own set of advantages and disadvantages.</p>
<p>I've had both hats, but now I'm more of the interviewer. I wanted to share here the advice that can help you if you are going to have tech challenges to pass.</p>
<blockquote>
<p>That does not mean that by following these tips, you will necessarily succeed in your interview!</p>
</blockquote>
<p>I'm going to provide you keys to having a clearer, cleaner and more organized approach, which are qualities generally sought after by the people who will interview you. Obviously, the technical level and other qualities expected depend on the company and the position you are applying for. In any case, these tips are essential elements that can only work in your favor. Or even potentially play against you if they are not or not well presented.</p>
<p>We start this series with tips for <strong>the offline coding challenge</strong>! I am talking about this exercise with more or less precise instructions that you are given to work at home in a given time.</p>
<p>‚ö†Ô∏è I am a front-end developer and give advice rather focused on a JS / TS test, but most of them are applicable whatever the language and the type of challenge.</p>
<h1>10 tips for rocking your front-end coding challenge</h1>
<h2>GOAL</h2>
<p>As with any interview, your goal should always remain the same: <strong>to make the person in front want to work with you.</strong></p>
<p>In the case of an offline technical test, you won't get direct interactions - the second objective will then be to <strong>make the person who will review your project want to read your code, and arouse their curiosity.</strong></p>
<h2>The instructions very carefully you will read</h2>
<p>It may seem like an extremely basic advice, but it is nevertheless the most important. <strong>Read the instructions, make sure you understand them.</strong> In any doubt, do not hesitate reach out to the contacts who sent you the coding challenge to ask for clarification.</p>
<p>If the instructions are long or complex, you can also reformulate them on your side, in the form of a TODO list for example. It is also important at this stage to define the primary and secondary elements.</p>
<h3>Example</h3>
<pre><code>Instructions: Create an application that displays a form with a text field and a &quot;search&quot; button. When you click on &quot;search&quot;, display a list of items from the list [given to you via API or JSON file].
</code></pre>
<p>The instructions are super vague, sometimes on purpose. But the absolutely essential elements in this application are:</p>
<ul>
<li>A web app (one page, Vanilla, React, whatever you want)</li>
<li>A text field and a submit button</li>
<li>when clicking the submit button, display the list of items according to the search.
<ul>
<li>it usually also implies a loading state, during which a loading spinner or a text will appear during the processing time</li>
</ul>
</li>
</ul>
<p>Et THAT'S IT !</p>
<p>Of course, it's then up to you to add some bonuses - which by definition should only come after the core elements are implemented:</p>
<ul>
<li>Form validation</li>
<li>A specific message when the list is returned is empty</li>
<li>Special attention given to UI/UX</li>
<li>Accessibility</li>
<li>Internationalization</li>
<li>Deploy the application on the Github / Heroku / Netlify pages...</li>
<li>[an endless list]</li>
</ul>
<h3>Is it really important?</h3>
<p>Only once the instructions are clear and understood, and you have determined the main elements, you can begin to think of coding. Advantages of processing like this:</p>
<ul>
<li>you make sure to understand and not to forget anything about the given instructions. As a result, your work is more organized.</li>
<li>the chosen solution may depend on the instructions: the exercise requires Vanilla / VueJS / React? Do I need SPA / routing? Do I have a complex state to manage (spoiler: no most of the time)? etc...</li>
</ul>
<p>You start, and by definition, you will make your first technical and architectural choices, which brings me to the second point: keep it as simple as possible.</p>
<h2>KISS - Keep It Simple Stupid</h2>
<p>Even if you're passionate about the challenge you've been sent, you probably don't want or have the time to spend a lot of time on it. And no one [with common sense] can blame you for that. You have the right to choose such library or framework because you are comfortable with it to go faster. Or choose a more naive or simple implementation because it suffices for this project.</p>
<p>The technical test doesn't have to be a steroid-boosted application because you want to show the full extent of your knowledge. Rather choose to apply them intelligently and simply, according to the need for the application (this advice is also valid for any project). Whatever the tech you decide to go with, just remember to mention it in the documentation section - see below.</p>
<p>Example: I know Redux like the back of my hand. The application asks me to display a list of items; do I really need Redux for such use case?</p>
<h2>Consistency you will keep</h2>
<p>The goal is to create code that induces the least possible cognitive load for the reviewer. One way to help is to have consistent code: always the same spacings, import organization, variable naming convention...</p>
<p>There are a multitude of tools that help us on keeping our code consistent and easy to read. I simply name <a href="https://eslint.org/">ESLint</a> and <a href="https://prettier.io/">Prettier</a>, which respectively take only a few minutes to install.</p>
<p>In the same idea, impose yourself a convention (or according to the instructions) to name your functions, components and variables: camel case / snake case? Filenames starting with a capital letter? File hierarchy? ...</p>
<h2>Be clear!</h2>
<p>Not so much a matter of consistency, but try to keep the code as easy to read as possible. A third person will pass behind you and will try to understand what you have coded. There are simple ways to get your code a smoother read:</p>
<ul>
<li><strong>name its variables, components and functions in a meaningful way</strong></li>
<li><strong>limit identation</strong>: a function or component that contains too many levels of indentation can probably be split into a function/component/variable with a representative name</li>
<li><strong>avoid nested ternaries</strong></li>
<li><strong>avoid files / functions that are too long.</strong> This can go through partterns like 1 component / function = 1 responsibility.</li>
</ul>
<p>If you feel the need to add a comment in your code to help understand a particular element, do not hesitate to do so. However, it can sometimes be a code smell indicating that your code could be written differently or refactored - but it can sometimes provide value and clarification.</p>
<h2>API tokens you won't commit</h2>
<p><strong>API tokens or keys or any other secrets you may need should never be committed</strong> or present in clear in your code. Use environment variables, and potentially a library to access them (example: <a href="https://github.com/motdotla/dotenv#readme">dotenv</a>).</p>
<p>Overall, this is good practice for any application you might write.</p>
<h2>Tests you will write (if you have time)</h2>
<p>In a perfect world, we have time to write tests: unit first, integration if possible and ideally a small end-to-end test. But - like in real life - it's time consuming. If you are running out of time and you haven't written your application in TDD (which is rarely the case for front-end), try if possible to add at least some unit / integrations tests on the main component of your application, or on the central logic. This will support the fact that you still know how to do it and have a concrete example to show.</p>
<p>And if you don't know how to do it or don't have the time, then write it in the &quot;Possible improvements&quot; section in your report (see documentation section below). Do not hesitate to indicate the scenarios you would have tested and which library you could have used - and why.</p>
<h2>Commit messages</h2>
<p>As in any project, it is better not to push all your code at once. Even if messages aren't perfect, your branch commits should reflect the iterative implementation of your application.</p>
<pre><code>Example:

- init app
- create search form
- API call to search for the items
- list all the items
- loading state
- ...
</code></pre>
<p><img src="/images/offline-tech-challenge/commit-messages.jpeg" alt="comics on commit messages"></p>
<p>To go further on the types of commits, there are now commit conventions on which you can base yourself on, for example <a href="https://www.conventionalcommits.org/en/v1.0.0/">Conventional commits</a>.</p>
<h2>Documentation you will write</h2>
<p>During a live interview we can easily speak our mind; but when you are alone with your exercise, it's often something we forget to do (even in the professional world, even the most seasoned): <strong>explain, document</strong>.</p>
<blockquote>
<p>Code alone is not enough to describe your intentions, choices and thoughts.</p>
</blockquote>
<p>When you submit your technical test, documentation can guide the person who reads your challenge through your approach.</p>
<p>At the base of your project, create a README.md if it does not already exist and describe your journey.</p>
<h3>Run the app</h3>
<p>As the basis, describe how to launch your application! Help the reviewer and save them time. It is also a good practice on any project to indicate how to launch the application as well as the tests if there are any</p>
<pre class="language-bash"><code class="language-bash"><span class="token comment"># Install dependencies</span><br><span class="token function">npm</span> <span class="token function">install</span><br><br><span class="token comment"># Start application: this will run the app in the development mode.</span><br><span class="token comment"># Open http://localhost:3000 to view it in the browser.</span><br><span class="token function">npm</span> start<br><br><span class="token comment"># Run unit tests</span><br><span class="token function">npm</span> run <span class="token builtin class-name">test</span></code></pre>
<p>PS: also remember to test these commands one last time before returning the project (yes it's a real life experience).</p>
<h3>Technical choices</h3>
<p>The technical choices made by a candidate during his challenge do not matter that much, as long as they are able to explain why they made them. Without explanation, it is difficult to say if the candidate went for it because it was what they knew or if it was out of conviction that it was the best choice for this use case. And even if the explanations can lead to questions, the technical choices and the explanations associated with them can then be challenged in the rest of the process.</p>
<pre><code>Example 1: The application had a form and a button, which led me to create a very simple form validation in vanilla JS. However, on a production application that would need to grow, we can think of integrating a library such as [form validation lib of your choice].
</code></pre>
<pre><code>Example 2: In order to deliver a pleasant user experience and to save time, I used [name of the UI library of your choice]. This library is quite light and offers the components I needed to easily compose the interface of the application.
</code></pre>
<p>The explanations can relate to the language (why Typescript?), the libraries / frameworks used, the way you have architected the code, the state management you have (or not) used...</p>
<p>All your choices come from decisions and experience. This process of explaining everything can only enlighten the person who will read your challenge and help to know you.</p>
<h3>Possible improvements</h3>
<p>You have implemented the essential elements of the challenge but you have spent all your time quota. Everything is going to be alright! Describe the elements that you did not have time to implement.</p>
<p>If you ever feel like you have implemented everything - stay humble, no code nor app is ever perfect. Look for improvements, missing points, technical or in terms of feature. <strong>It is extremely important to stay objective about your work.</strong> And if you still can't find what to say, you can always add notes on how the application could evolve in case we ask to scale (addition of features or people to work on it, mass user support , accessibility, optimizations...)</p>
<pre><code>Example 1 - tech improvement: I didn't have time to implement unit tests for all components. As for [this component that you were able to test], the idea would be to continue this process for all the other components of the application.
</code></pre>
<pre><code>Example 2 - the product improvement: the API returned me other properties which would have been interesting to show to the users like [name a property]. Moreover, it is possible to add a filter/sort/pagination function which would improve the user experience the returned list is sometimes very large.
</code></pre>
<p>This section may seem trivial, but it can save you if you just haven't had time to do everything. <strong>No need sweep dust under the carpet</strong>, the people who will read your challenge won't be fooled; take the lead, explain everything, and this will allow you to defend yourself during a potential debriefing interview.</p>
<h2>Read youself!</h2>
<p>When you are finally finished, I can only encourage you to step out of your body, and put yourself in the place of a third person. Review everything, the README, the code on Github (or whatever the platform). This will allow you to identify points for improvement - which you will either have time to correct or add as an area for improvement in the README!</p>
<p>Also check that</p>
<ul>
<li>there is nothing left of the boilerplate that you are not using (assets, unit tests that no longer correspond to anything, etc.)</li>
<li>the intention behind your code is clear, that it is readable</li>
</ul>
<h1>Conclusion</h1>
<p>I realize while writing this article that all of this advice can seem like a lot of mental work. Just keep in mind that your test doesn't have to be perfect. Also that:</p>
<ul>
<li><strong>the person who will read you is a human - and potentially your future colleague!</strong> Help them to project themselves. The easier you make their job, the more satisfied they will be - it takes organization and explanations</li>
<li><strong>you have a limited time for this challenge</strong>: if you don't have one defined in the test that the company sent to you, give yourself a time limit that you will note in the README. It is not your main job to write this challenge and you should not spend excessive time on it.</li>
</ul>
<p>I hope this was useful, good luck in your next interview! I'll continue this series with an article about live coding challenges.</p>

    ]]>
      </content>
    </entry>
  
    
    <entry>
      <title>Live coding challenge tips</title>
      <link href="/en/blog/tips-live-coding-challenge/"/>
      <updated>2022-08-27T00:00:00Z</updated>
      <id>/en/blog/tips-live-coding-challenge/</id>
      <content type="html">
        <![CDATA[
      <p>Let's continue the interview tips series with the dreaded <strong>live coding challenges</strong>! Personally, I have a knot in my stomach by simply reading the email that tells me that I have a live coding session in a recruitment process (and I've been dev for 10 years).</p>
<p>Applying for a job in tech usually comes with its set of technical tests. Live coding, deep dive, MCQ... each type of interview has its own set of advantages and disadvantages.</p>
<p>I've had both hats, but now I'm more of the interviewer. I wanted to share here the advice that can help you if you are going to have tech challenges to pass.</p>
<blockquote>
<p>That does not mean that by following these tips, you will necessarily succeed in your interview!</p>
</blockquote>
<p>I'm going to provide you keys to having a clearer, cleaner and more organized approach, which are qualities generally sought after by the people who will interview you. Obviously, the technical level and other qualities expected depend on the company and the position you are applying for. In any case, these tips are essential elements that can only work in your favor. Or even potentially play against you if they are not or not well presented.</p>
<h1>Live coding challenge tips</h1>
<h2>What's a live coding challenge</h2>
<p>The goal is to solve one (or more) tech exercises <strong>live</strong> in front of one or several people. This kind of test is difficult and particularly dreaded because <strong>we find ourselves naked in front of one or more strangers</strong> who judge us in real time, which leaves little room for error. Anyway, that's what we say to ourselves.</p>
<h2>A two-way test</h2>
<p>As with any interview, the goal must always remain the same: <strong>make the person in front of you want to work with you.</strong>. But this time it goes both ways; it is also necessary that the people in front of you make you want to work with them - finding yourself in front of a pretentious *** probably remove all desire to join their company!</p>
<p>My tip is then to approach this interview as an exchange, a discussion or even as a mob-programming session. It may be your future colleagues that you meet for the first time. These people in front are not mere spectators, they are here to accompany you, answer your questions, unblock you if necessary.</p>
<h3>Before the interview: the preparation</h3>
<p>As with any interview, it is best to do your research beforehand and prepare questions. In addition to giving context, it allows you to have questions to ask at the end of the interview. You can then search conferences, technical blogs, publications... It is not only important to show your interest in the company, but also and above all to show that you are planning.</p>
<p>Regarding the technical part, the process is sometimes communicated in advance, which then makes it relatively easy to know what to work on. If not, several possibilities and resources:</p>
<ul>
<li>the company is well-known: <a href="https://www.glassdoor.fr/">Glassdoor</a> lists interview testimonials from candidates who can then give an indication of the type of exercise usually given.</li>
<li>if nothing appears on GlassDoor, it is always possible to train for free on platforms like <a href="https://www.codingame.com/">CodingGame</a> on more or less complex exercises.</li>
</ul>
<h2>During the interview</h2>
<h3>Instructions</h3>
<p>It seems extremely basic as advice, but it is nevertheless the most important. <strong>Read the instructions, make sure you understand them. and LISTEN.</strong> If there is any doubt about an instruction, ask questions. It is better to repeat than to be wide of the mark. A smarter way to make sure that you have understood correctly (or precisely that you are not sure you understand) is to reformulate the exercise in your own words, and ask if this is what is expected.</p>
<h2>Show our best self</h2>
<p>The most common syndrome I've noticed among developers is <strong>over-engineering</strong>.</p>
<blockquote>
<p>&quot;Super easy, I know how to do it, so let's go for a nested double reduce!&quot;</p>
</blockquote>
<p>Expectation VS Reality: We forget the return, the parameters are in the wrong direction, we initialized the function badly and we made a typo for each word.</p>
<p>With stress, it's actually super hard to output code to an editor you're probably not familiar with - probably without auto-completion, and with people watching and you think are judging every typo. Even when we are used to it. Even when you're a senior!</p>
<p><mark>Overall, and especially when stressed, #1 tip: ITERATE.</mark></p>
<pre><code>Example: start with a first `for` loop, mutated variables here and there. Then extract into a function. Then use a `.map` instead (or why not a `reduce` if you really feel like it). etc
</code></pre>
<p><mark>And the secret that isn't one - tip #2 TALK.</mark></p>
<p>Super important to avoid isolating yourself in your exercise and to make your intention understood by the people in front. They will be able to understand, help or challenge you. <strong>You give yourself a chance to argue your choices while showing that you are objective about your code.</strong></p>
<pre><code>Example: &quot;Here I'm going with a naive approach to start with, it's not ideal performance-wise, but I'll come back to it later.&quot;
</code></pre>
<p>And if the result is not as expected, <strong>de-dramatize</strong>. The interviewers know that it is a stressful exercise and that no one is in possession of all their means.</p>
<h2>Manage stress</h2>
<p>On D-Day, whether you've been preparing for weeks or not at all, you're usually <strong>hyper-stressed</strong> (except superhuman people, of which I'll never be one).</p>
<p>Stress is actually pretty good <strong>in small doses</strong>. It allows you to be concentrated, to try to surpass yourself during the exercise. But it is essential not to be overwhelmed. Several techniques exist:</p>
<ul>
<li>To know oneself</li>
<li>Preparing for the interview</li>
<li>To ask questions</li>
</ul>
<h3>Know oneself</h3>
<p>It is difficult to know our reactions given a situation before being actually confronted with it. In a stressful situation in front of people, do I tend to block / make jokes / talk too much...?</p>
<p>It is often after several interviews that we get to know oneself other better, through what we feel but also through the feedback that we can receive (or ask to receive) after the interview.</p>
<h2>Ask questions &amp; speak</h2>
<p>Ask questions by bouncing on the test or remarks of the speakers; &quot;are you using a /lib/archi/process?etc convention&quot;. This shows that you care and can give you insight into how the teams are working.</p>
<p>If possible, practice <strong>speaking while coding</strong>. We rarely have this need on a daily basis, so it's quite unnatural and probably destabilizing at first. At least raise your head between a few lines of code to explain what you're trying to do. <strong>Ask for help if you are stuck.</strong></p>
<p>The important thing is to keep in touch with the interviewers. Yes it's a technical test but the fact remains that an important part of the success of this challenge is attributed to communication and feeling because it is an essential component in our daily life (even for the devs yes).</p>
<h2>At the end of the interview</h2>
<p>This is the perfect time to say what you thought of the test and your performance. The ideal is to provide suggestions for improvements to the rendered code, whether technical, functional, from a QA point of view, performance, etc.</p>
<p><mark>No code is perfect (and certainly not code from a live coding challenge). Tip #3: stay objective and humble!</mark></p>
<h1>Conclusion</h1>
<p>Live coding challenges are difficult and stressful, it's normal to feel that way. The interviewers - our future colleagues? - are here to help us and put us at ease. Count on them, but help them by keeping communication open all the time.</p>

    ]]>
      </content>
    </entry>
  
</feed>